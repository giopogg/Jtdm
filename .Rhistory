plot(tSDM)
tSDM
summary(tSDM)
summary(tSDM)
# Check for every combinations. i.e. method = "glm"& penal = NULL/horshoe or
# method = "stan_glm", penal = NULL/horshoe/coeff.signs()
SDM = tSDM$model$Y6
class(SDM)
SDM$coef
coef(SDM)
plot(SDM)
coef(SDM, standardise = T)
summary(tSDM)
summary(SDM)
SDM
?loo
?loo.trophicSDMfit
loo(tSDM)
library(rstanarm)
?loo.trophicSDMfit
loo(tSDM)
loo.trophicSDMfit(tSDM)
library(devtools)
# Run to install webSDM
# install_github("giopogg/webSDM")
library(webSDM)
library(igraph)
library(bayesplot)
set.seed(123)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(devtools)
# Run to install webSDM
# install_github("giopogg/webSDM")
library(webSDM)
library(igraph)
library(bayesplot)
set.seed(123)
# Set number of species
S = 6
# Create the adjacency matrix of the graph
A = matrix(0,nrow=S,ncol=S)
# Ensure that the graph is connected
while(!is.connected(graph_from_adjacency_matrix(A))){
A = A_w = matrix(0,nrow=S,ncol=S)
# Create links (i.e. zeros and ones of the adjacency matrix)
for(j in 1:(S-1)){
A[c((j+1):S),j] = sample(c(0,1), S-j, replace = T)
}
# Sample weights for each link
#A_w[which(A != 0)] = runif(1,min=0,max=2)
}
colnames(A) = rownames(A) = paste0("Y",as.character(1:S))
# Build an igraph object from A
G = graph_from_adjacency_matrix(A)
plot(G)
# Number of sites
n = 500
# Simulate environmental gradient
X_1= runif(n,max=1)
X_2= runif(n,max=1)
X=cbind(1,X_1,X_2)
B = matrix(c(1, -1, 1, # Y1
1, -1, 1, # Y2
1, -1, 1, # Y3
1, 1, -1, # Y4
1, 1, -1, # Y5
1, 1, -1 # Y6
), ncol = 6)
B
for(j in 1:S){
# The logit of the probability of presence of each species is given by the effect of the environment and of the   preys
# Create the linear term. As j increases, the weight of the environmental effect decreases and the biotic effect increases
V[,j]= (1/j)*X%*%B[j,] + (1- 1/j)*Y%*%A[j,]
# Transform to logit
prob[,j]=1/(1+exp(-V[,j]))
# Sample the probability of presence
Y[,j]=rbinom(n=n,size=1,prob=prob[,j])
}
B = matrix(c(1, -1, 1, # Y1
1, -1, 1, # Y2
1, -1, 1, # Y3
1, 1, -1, # Y4
1, 1, -1, # Y5
1, 1, -1 # Y6
), ncol = 3)
# Sample the distribution of each species as a logit model as a function of the environment and the distribution of preys
Y = V = prob = matrix(0,nrow=n,ncol=S)
for(j in 1:S){
# The logit of the probability of presence of each species is given by the effect of the environment and of the   preys
# Create the linear term. As j increases, the weight of the environmental effect decreases and the biotic effect increases
V[,j]= (1/j)*X%*%B[j,] + (1- 1/j)*Y%*%A_w[j,]
# Transform to logit
prob[,j]=1/(1+exp(-V[,j]))
# Sample the probability of presence
Y[,j]=rbinom(n=n,size=1,prob=prob[,j])
}
# Set names
colnames(Y) = paste0("Y",as.character(1:S))
# Sample the distribution of each species as a logit model as a function of the environment and the distribution of preys
Y = V = prob = matrix(0,nrow=n,ncol=S)
for(j in 1:S){
# The logit of the probability of presence of each species is given by the effect of the environment and of the   preys
# Create the linear term. As j increases, the weight of the environmental effect decreases and the biotic effect increases
V[,j]= (1/j)*X%*%B[j,] + (1- 1/j)*Y%*%A[j,]
# Transform to logit
prob[,j]=1/(1+exp(-V[,j]))
# Sample the probability of presence
Y[,j]=rbinom(n=n,size=1,prob=prob[,j])
}
# Set names
colnames(Y) = paste0("Y",as.character(1:S))
nchains = 2
test.run = FALSE
if (test.run){
#with this option, the vignette runs fast but results are not reliable
iter = 10
verbose = FALSE
} else {
#with this option, the vignette evaluates slow but it reproduces the results of the #.pdf version
iter = 1000
verbose = TRUE
}
m = trophicSDM(Y = Y, X = X, G = G, env.formula = "~ X_1 + X_2", family = binomial(link = "logit"),
method = "stan_glm", chains = nchains, iter = iter, verbose = verbose)
m
class(m)
# Plot mcmc potential scale reduction factor (aka rhat)
p1 = mcmc_rhat(m$mcmc.diag$rhat)
# Plot mcmc ratio of effective sample size to total sample size
p2 = mcmc_neff(m$mcmc.diag$neff.ratio)
grid.arrange(p1, p2, ncol = 2)
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
plot(m$model$Y5$model, "trace")
plot(m)
n=100
J=10
beta=runif(2,min=-5,max=5)
x=cbind(1,runif(n,min=0,max=2))
sigma=1
Y=dist=vector()
for(i in 1:n){
Y_i = rnorm(J,mean=beta * x[i,],sd=sqrt(sigma))
Y=c(Y, Y_i)
dist=c(dist, (Y_i - beta * x[i,])^2)
}
intra_var = sum(dist)/(n*J-1)
print(intra_var) # ~ 1 of course
X=x[rep(seq_len(nrow(x)), each=J), ]
dim(Y)
length(Y)
dim(X)
Y=matrix(Y,nrow=J)
Y=apply(Y,mean,MARGIN=2)
sum((Y - x %*% beta)^2)/(n-1) #1.5 greater than true intra comm
load("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/sites_spp_herb.RData")
readRDS("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/sites_spp_herb.RData")
sites_spp = readRDS("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/sites_spp_herb.RData")
load("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/traits_spp_herb.RData")
traits_spp = readRDS("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/traits_spp_herb.RData")
dim(traits_spp)
dim(sites_spp)
View(sites_spp)
trait_prep = data.frame()
View(traits_spp)
j =1
i =1
traits_spp %>% filter(rownames(traits_spp) == colnames(sites_spp[j]))
library(dplyr)
traits_spp %>% filter(rownames(traits_spp) == colnames(sites_spp[j]))
traits_spp = as.data.frame(readRDS("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/traits_spp_herb.RData"))
sites_spp = as.data.frame(readRDS("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/sites_spp_herb.RData"))
traits_spp %>% filter(rownames(traits_spp) == colnames(sites_spp[j]))
sites_spp[i,]
sites_spp[i,j]
rep(traits_spp %>% filter(rownames(traits_spp) == colnames(sites_spp[j])),2)
df <- data.frame(a = 1:2, b = letters[1:2])
df[rep(seq_len(nrow(df)), each = 2), ]
df
rep(seq_len(nrow(df)), each = 2)
which(rownames(traits_spp) == colnames(sites_spp[j]))
traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),sites_spp[i,j])]
traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),10)]
traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),10),]
trait_prep = data.frame()
for(i in nrow(sites_spp)){
for(j in ncol(sites_spp))
if(sites_spp[i,j]>0){
trait_prep = rbind(trait_prep, traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),sites_spp[i,j]),])
}
}
trait_prep = data.frame()
for(i in nrow(sites_spp)){
for(j in ncol(sites_spp)){
if(sites_spp[i,j]>0){
trait_prep = rbind(trait_prep,
traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),
sites_spp[i,j]),])
}
}
}
trait_prep = data.frame()
for(i in 1:nrow(sites_spp)){
for(j in 1:ncol(sites_spp)){
if(sites_spp[i,j]>0){
trait_prep = rbind(trait_prep,
traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),
sites_spp[i,j]),])
}
}
}
data(X)
library(jtdm)
data(X)
rm(X)
data(X)
force(X)
View(trait_prep)
length(which(grep("Adenostyles.alliariae",rownames(trait_prep))))
length(grep("Adenostyles.alliariae",rownames(trait_prep)))
55+12+15+4
grep("Adenostyles.alliariae",rownames(trait_prep))
55+22+15+4+2
data("Y")
colnames(Y)
trait_prep = trait_prep %>% select(SLA,LNC,Height)
trait_prep = trait_prep %>% select(SLAm, LNCm, Height)
trait_prep2 = trait_prep[na.omit(trait_prep)]
trait_prep2 = trait_prep[na.omit(trait_prep),]
?complete.cases
trait_prep2 = trait_prep[complete.cases(trait_prep),]
trait_prep = trait_prep[complete.cases(trait_prep),]
X_new = data.frame()
i
sum(X[i,]
)
View(Y)
View(traits_spp)
View(sites_spp)
t2 = sum(X[i,]
)
t2 = sites_spp %>% filter(rownames(sites_spp) %in% rownames(Y))
sites_spp = as.data.frame(readRDS("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/sites_spp_herb.RData"))
sites_spp = sites_spp %>% filter(rownames(sites_spp) %in% rownames(Y))
traits_spp = as.data.frame(readRDS("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/traits_spp_herb.RData"))
trait_prep = data.frame()
for(i in 1:nrow(sites_spp)){
for(j in 1:ncol(sites_spp)){
if(sites_spp[i,j]>0){
trait_prep = rbind(trait_prep,
traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),
sites_spp[i,j]),])
}
}
}
trait_prep = trait_prep %>% select(SLAm, LNCm, Height)
trait_prep = trait_prep[complete.cases(trait_prep),]
rownames(X)
rownames(sites_spp)
all(rownames(sites_spp) == rownames(X))
i
sum(sites_spp[i,])
rep(X[i,], sum(sites_spp[i,]))
rep(i, sum(sites_spp[i,]))
X_new = data.frame()
for(i in 1:nrow(sites_spp)){
X_new = rbind(X_new,
X[rep(i, sum(sites_spp[i,]))])
}
dim(X_new)
dim(trait_prep)
X[rep(i, sum(sites_spp[i,]))]
X_new = data.frame()
for(i in 1:nrow(sites_spp)){
X_new = rbind(X_new,
X[rep(i, sum(sites_spp[i,])),])
}
dim(X_new)
dim(trait_prep)
for(i in 1:nrow(sites_spp)){
if(sum(sites_spp[i,]) > 0 ) cat(i)
}
for(i in 1:nrow(sites_spp)){
if(sum(sites_spp[i,]) == 0 ) cat(i)
}
complete_rich =
which(sites_spp[i,]>0)
complete_rich =
which(sites_spp[i,]>0)
which(sites_spp[i,]>0)
complete_rich =
colnames(sites_spp)[,which(sites_spp[i,]>0)]
complete_rich =
colnames(sites_spp)[which(sites_spp[i,]>0)]
colnames(sites_spp)[which(sites_spp[i,]>0)]
complete_rich =
traits_spp[colnames(sites_spp)[which(sites_spp[i,]>0)],]
traits_spp[colnames(sites_spp)[which(sites_spp[i,]>0)],]
traits_spp = as.data.frame(readRDS("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/traits_spp_herb.RData"))
traits_spp = traits_spp %>% select(SLAm, LNCm, Height)
traits_spp = trait_spp[complete.cases(trait_spp),]
traits_spp = traits_spp[complete.cases(traits_spp),]
# re arrange traits
trait_prep = data.frame()
for(i in 1:nrow(sites_spp)){
for(j in 1:ncol(sites_spp)){
if(sites_spp[i,j]>0){
trait_prep = rbind(trait_prep,
traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),
sites_spp[i,j]),])
}
}
}
trait_prep = trait_prep %>% select(SLAm, LNCm, Height)
trait_prep = trait_prep[complete.cases(trait_prep),]
# re arrange X
all(rownames(sites_spp) == rownames(X))
X_new = data.frame()
for(i in 1:nrow(sites_spp)){
#complete_rich = traits_spp[colnames(sites_spp)[which(sites_spp[i,]>0)],]
X_new = rbind(X_new,
X[rep(i, sum(sites_spp[i,])),])
}
dim(X_new)
dim(trait_prep)
View(traits_spp)
traits_spp = as.data.frame(readRDS("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/traits_spp_herb.RData"))
ncol(traits_spp)
nrow(traits_spp)
traits_spp = traits_spp %>% select(SLAm, LNCm, Height)
traits_spp = traits_spp[complete.cases(traits_spp),]
nrow(traits_spp)
ncol(sites_spp)
#remove uncomplete species
sites_spp = sites_spp %>% select(rownames(traits_spp))
ncol(sites_spp)
# re arrange traits
trait_prep = data.frame()
for(i in 1:nrow(sites_spp)){
for(j in 1:ncol(sites_spp)){
if(sites_spp[i,j]>0){
trait_prep = rbind(trait_prep,
traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),
sites_spp[i,j]),])
}
}
}
trait_prep = trait_prep %>% select(SLAm, LNCm, Height)
trait_prep = trait_prep[complete.cases(trait_prep),]
# re-arrange X
all(rownames(sites_spp) == rownames(X))
X_new = data.frame()
for(i in 1:nrow(sites_spp)){
#complete_rich = traits_spp[colnames(sites_spp)[which(sites_spp[i,]>0)],]
X_new = rbind(X_new,
X[rep(i, sum(sites_spp[i,])),])
}
dim(X_new)
dim(trait_prep)
?functcompt
??functcomp
# Now compute CWM
library(FD)
?functcomp
dim(traits_spp)
dim(sites_spp)
CWM = functcomp(traits_spp, sites_spp)
CWM = functcomp(as.matrix(traits_spp), as.matrix(sites_spp))
dim(CWM)
# Species-level approach i.e. Wilfried
lm(trait_prep ~ X_new)
class(trait_prep)
# Species-level approach i.e. Wilfried
lm(as.matrix(trait_prep) ~ as.matrix(X_new))
# Species-level approach i.e. Wilfried
summary(lm(as.matrix(trait_prep) ~ as.matrix(X_new)))
# Species-level approach i.e. Wilfried
lm(as.matrix(trait_prep) ~ as.matrix(X_new))
# CWM approach
lm(CWM ~ X)
class(CWM)
# CWM approach
lm(as.matrix(CWM) ~ X)
pr_sp = predict(m_sp, X)
# Species-level approach i.e. Wilfried
m_sp = lm(as.matrix(trait_prep) ~ as.matrix(X_new))
pr_sp = predict(m_sp, X)
pr_sp = predict(m_sp, as.data.frame(X))
dim(as.data.frame(X))
pr_sp = predict(m_sp, newdata = as.data.frame(X))
dim(pr_sp)
# CWM approach
m_cwm = lm(as.matrix(CWM) ~ X)
predict(m_cwm, X)
predict(m_cwm, as.data.frame(X))
?predict.lm
dim(as.matrix(X_new))
View(X_new)
# Species-level approach i.e. Wilfried
m_sp = lm(as.matrix(trait_prep) ~ GDD + FDD, data = X_new)
lm(as.matrix(trait_prep) ~ GDD + FDD, data = X_new)
pr_sp = predict(m_sp, newdata = as.data.frame(X))
# CWM approach
m_cwm = lm(as.matrix(CWM) ~ X)
predict(m_cwm, as.data.frame(X))
pr_cwm = predict(m_cwm, as.data.frame(X))
# CWM approach
m_cwm = lm(as.matrix(CWM) ~ GDD + FDD, data = as.data.frame(X))
pr_cwm = predict(m_cwm, as.data.frame(X))
View(pr_cwm)
View(pr_sp)
plot(pr_cwm[,"SLAm"],pr_sp[,"SLAm"])
par(mfrow = c(3,1))
plot(pr_cwm[,"SLAm"],pr_sp[,"SLAm"])
plot(pr_cwm[,"LNCm"],pr_sp[,"LNCm"])
plot(pr_cwm[,"Heightm"],pr_sp[,"Heightm"])
plot(pr_cwm[,"Height"],pr_sp[,"Height"])
abline(0,1)
abline(0,1. col  = "red")
par(mfrow = c(3,1))
plot(pr_cwm[,"SLAm"],pr_sp[,"SLAm"])
abline(0,1, col  = "red")
plot(pr_cwm[,"LNCm"],pr_sp[,"LNCm"])
abline(0,1, col  = "red")
plot(pr_cwm[,"Height"],pr_sp[,"Height"])
abline(0,1, col  = "red")
View(X_new)
View(traits_spp)
View(trait_prep)
# re-arrange X
all(rownames(sites_spp) == rownames(X))
rownames(sites_spp)
rownames(X)
View(traits_spp)
View(trait_prep)
sapply(1:3, function(i) cor(pr_cwm[,i], CWM[,i])^2)
sapply(1:3, function(i) cor(pr_sp[,i], CWM[,i])^2)
sapply(1:3, function(i) cor(pr_sp[,i], CWM[,i])^2)
sapply(1:3, function(i) cor(pr_cwm[,i], CWM[,i])^2)
sum(pr_sp[,i]- CWM[,i])
i= 1
sum(pr_sp[,i]- CWM[,i])
(pr_sp[,i]- CWM[,i]^2)
(pr_sp[,i]- CWM[,i])^2
sapply(1:3, function(i) sqrt(sum((pr_sp[,i]- CWM[,i])^2)))
sapply(1:3, function(i) sqrt(sum((pr_cwm[,i]- CWM[,i])^2)))
sapply(1:3, function(i) sqrt(sum((pr_sp[,i]- CWM[,i])^2)))
sapply(1:3, function(i) sqrt(sum((pr_cwm[,i]- CWM[,i])^2)))
n=100
J=10
beta=runif(2,min=-5,max=5)
x=cbind(1,runif(n,min=0,max=2))
sigma=1
Y=dist=vector()
for(i in 1:n){
Y_i = rnorm(J,mean=beta * x[i,],sd=sqrt(sigma))
Y=c(Y, Y_i)
dist=c(dist, (Y_i - beta * x[i,])^2)
}
intra_var = sum(dist)/(n*J-1)
print(intra_var) # ~ 1 of course
X=x[rep(seq_len(nrow(x)), each=J), ]
X=X[,-1]
m0=lm(Y~X)
summary(m0)
Y=matrix(Y,nrow=J)
Y=apply(Y,mean,MARGIN=2)
sum((Y - x %*% beta)^2)/(n-1) #1.5 greater than true intra comm
m1=lm(Y~x[,-1])
summary(m1)
dim(Y)
length(Y)
n=100
J=100
beta=runif(2,min=-5,max=5)
x=cbind(1,runif(n,min=0,max=2))
sigma=1
Y=as.data.frame(matrix(NA,nrow=n,ncol=J))
for(i in 1:n){
Y[i,] = rnorm(J,mean=beta * x[i,],sd=sqrt(sigma))
}
colnames(x)=c("int","x")
dim(Y)
rank(as.matrix(X_new))
?rank
library(Matrix)
rankMatrix(as.matrix(X_new))
?jtdm
?jtdm_fit
jtdm_fit(trait_prep, X_new, as.formula("~GDD+FDD+forest"))
jtdm_fit(as.matrix(trait_prep), as.matrix(X_new), as.formula("~GDD+FDD+forest"))
knitr::opts_chunk$set(
collapse = TRUE,
fig.path = "man/figures/", echo = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
fig.path = "man/figures/", echo = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
fig.path = "man/figures/", echo = TRUE)
devtools::build_rmd("vignettes/ORCHAMP_dataset.Rmd")
setwd("~/Documents/GitHub/jtdm")
devtools::build_rmd("vignettes/ORCHAMP_dataset.Rmd")
# Check on other systems
# Asked by CRAN
# Windows
devtools::check_win_devel()
# Create CRAN comment
usethis::use_cran_comments(open = rlang::is_interactive())
