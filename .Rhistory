trait_prep = rbind(trait_prep,
traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),
sites_spp[i,j]),])
}
}
}
trait_prep = data.frame()
for(i in 1:nrow(sites_spp)){
for(j in 1:ncol(sites_spp)){
if(sites_spp[i,j]>0){
trait_prep = rbind(trait_prep,
traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),
sites_spp[i,j]),])
}
}
}
data(X)
library(jtdm)
data(X)
rm(X)
data(X)
force(X)
View(trait_prep)
length(which(grep("Adenostyles.alliariae",rownames(trait_prep))))
length(grep("Adenostyles.alliariae",rownames(trait_prep)))
55+12+15+4
grep("Adenostyles.alliariae",rownames(trait_prep))
55+22+15+4+2
data("Y")
colnames(Y)
trait_prep = trait_prep %>% select(SLA,LNC,Height)
trait_prep = trait_prep %>% select(SLAm, LNCm, Height)
trait_prep2 = trait_prep[na.omit(trait_prep)]
trait_prep2 = trait_prep[na.omit(trait_prep),]
?complete.cases
trait_prep2 = trait_prep[complete.cases(trait_prep),]
trait_prep = trait_prep[complete.cases(trait_prep),]
X_new = data.frame()
i
sum(X[i,]
)
View(Y)
View(traits_spp)
View(sites_spp)
t2 = sum(X[i,]
)
t2 = sites_spp %>% filter(rownames(sites_spp) %in% rownames(Y))
sites_spp = as.data.frame(readRDS("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/sites_spp_herb.RData"))
sites_spp = sites_spp %>% filter(rownames(sites_spp) %in% rownames(Y))
traits_spp = as.data.frame(readRDS("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/traits_spp_herb.RData"))
trait_prep = data.frame()
for(i in 1:nrow(sites_spp)){
for(j in 1:ncol(sites_spp)){
if(sites_spp[i,j]>0){
trait_prep = rbind(trait_prep,
traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),
sites_spp[i,j]),])
}
}
}
trait_prep = trait_prep %>% select(SLAm, LNCm, Height)
trait_prep = trait_prep[complete.cases(trait_prep),]
rownames(X)
rownames(sites_spp)
all(rownames(sites_spp) == rownames(X))
i
sum(sites_spp[i,])
rep(X[i,], sum(sites_spp[i,]))
rep(i, sum(sites_spp[i,]))
X_new = data.frame()
for(i in 1:nrow(sites_spp)){
X_new = rbind(X_new,
X[rep(i, sum(sites_spp[i,]))])
}
dim(X_new)
dim(trait_prep)
X[rep(i, sum(sites_spp[i,]))]
X_new = data.frame()
for(i in 1:nrow(sites_spp)){
X_new = rbind(X_new,
X[rep(i, sum(sites_spp[i,])),])
}
dim(X_new)
dim(trait_prep)
for(i in 1:nrow(sites_spp)){
if(sum(sites_spp[i,]) > 0 ) cat(i)
}
for(i in 1:nrow(sites_spp)){
if(sum(sites_spp[i,]) == 0 ) cat(i)
}
complete_rich =
which(sites_spp[i,]>0)
complete_rich =
which(sites_spp[i,]>0)
which(sites_spp[i,]>0)
complete_rich =
colnames(sites_spp)[,which(sites_spp[i,]>0)]
complete_rich =
colnames(sites_spp)[which(sites_spp[i,]>0)]
colnames(sites_spp)[which(sites_spp[i,]>0)]
complete_rich =
traits_spp[colnames(sites_spp)[which(sites_spp[i,]>0)],]
traits_spp[colnames(sites_spp)[which(sites_spp[i,]>0)],]
traits_spp = as.data.frame(readRDS("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/traits_spp_herb.RData"))
traits_spp = traits_spp %>% select(SLAm, LNCm, Height)
traits_spp = trait_spp[complete.cases(trait_spp),]
traits_spp = traits_spp[complete.cases(traits_spp),]
# re arrange traits
trait_prep = data.frame()
for(i in 1:nrow(sites_spp)){
for(j in 1:ncol(sites_spp)){
if(sites_spp[i,j]>0){
trait_prep = rbind(trait_prep,
traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),
sites_spp[i,j]),])
}
}
}
trait_prep = trait_prep %>% select(SLAm, LNCm, Height)
trait_prep = trait_prep[complete.cases(trait_prep),]
# re arrange X
all(rownames(sites_spp) == rownames(X))
X_new = data.frame()
for(i in 1:nrow(sites_spp)){
#complete_rich = traits_spp[colnames(sites_spp)[which(sites_spp[i,]>0)],]
X_new = rbind(X_new,
X[rep(i, sum(sites_spp[i,])),])
}
dim(X_new)
dim(trait_prep)
View(traits_spp)
traits_spp = as.data.frame(readRDS("~/Documents/Phd/Traits_joint/Orchamp_casestudy/DATA_PREP/traits_spp_herb.RData"))
ncol(traits_spp)
nrow(traits_spp)
traits_spp = traits_spp %>% select(SLAm, LNCm, Height)
traits_spp = traits_spp[complete.cases(traits_spp),]
nrow(traits_spp)
ncol(sites_spp)
#remove uncomplete species
sites_spp = sites_spp %>% select(rownames(traits_spp))
ncol(sites_spp)
# re arrange traits
trait_prep = data.frame()
for(i in 1:nrow(sites_spp)){
for(j in 1:ncol(sites_spp)){
if(sites_spp[i,j]>0){
trait_prep = rbind(trait_prep,
traits_spp[rep(which(rownames(traits_spp) == colnames(sites_spp[j])),
sites_spp[i,j]),])
}
}
}
trait_prep = trait_prep %>% select(SLAm, LNCm, Height)
trait_prep = trait_prep[complete.cases(trait_prep),]
# re-arrange X
all(rownames(sites_spp) == rownames(X))
X_new = data.frame()
for(i in 1:nrow(sites_spp)){
#complete_rich = traits_spp[colnames(sites_spp)[which(sites_spp[i,]>0)],]
X_new = rbind(X_new,
X[rep(i, sum(sites_spp[i,])),])
}
dim(X_new)
dim(trait_prep)
?functcompt
??functcomp
# Now compute CWM
library(FD)
?functcomp
dim(traits_spp)
dim(sites_spp)
CWM = functcomp(traits_spp, sites_spp)
CWM = functcomp(as.matrix(traits_spp), as.matrix(sites_spp))
dim(CWM)
# Species-level approach i.e. Wilfried
lm(trait_prep ~ X_new)
class(trait_prep)
# Species-level approach i.e. Wilfried
lm(as.matrix(trait_prep) ~ as.matrix(X_new))
# Species-level approach i.e. Wilfried
summary(lm(as.matrix(trait_prep) ~ as.matrix(X_new)))
# Species-level approach i.e. Wilfried
lm(as.matrix(trait_prep) ~ as.matrix(X_new))
# CWM approach
lm(CWM ~ X)
class(CWM)
# CWM approach
lm(as.matrix(CWM) ~ X)
pr_sp = predict(m_sp, X)
# Species-level approach i.e. Wilfried
m_sp = lm(as.matrix(trait_prep) ~ as.matrix(X_new))
pr_sp = predict(m_sp, X)
pr_sp = predict(m_sp, as.data.frame(X))
dim(as.data.frame(X))
pr_sp = predict(m_sp, newdata = as.data.frame(X))
dim(pr_sp)
# CWM approach
m_cwm = lm(as.matrix(CWM) ~ X)
predict(m_cwm, X)
predict(m_cwm, as.data.frame(X))
?predict.lm
dim(as.matrix(X_new))
View(X_new)
# Species-level approach i.e. Wilfried
m_sp = lm(as.matrix(trait_prep) ~ GDD + FDD, data = X_new)
lm(as.matrix(trait_prep) ~ GDD + FDD, data = X_new)
pr_sp = predict(m_sp, newdata = as.data.frame(X))
# CWM approach
m_cwm = lm(as.matrix(CWM) ~ X)
predict(m_cwm, as.data.frame(X))
pr_cwm = predict(m_cwm, as.data.frame(X))
# CWM approach
m_cwm = lm(as.matrix(CWM) ~ GDD + FDD, data = as.data.frame(X))
pr_cwm = predict(m_cwm, as.data.frame(X))
View(pr_cwm)
View(pr_sp)
plot(pr_cwm[,"SLAm"],pr_sp[,"SLAm"])
par(mfrow = c(3,1))
plot(pr_cwm[,"SLAm"],pr_sp[,"SLAm"])
plot(pr_cwm[,"LNCm"],pr_sp[,"LNCm"])
plot(pr_cwm[,"Heightm"],pr_sp[,"Heightm"])
plot(pr_cwm[,"Height"],pr_sp[,"Height"])
abline(0,1)
abline(0,1. col  = "red")
par(mfrow = c(3,1))
plot(pr_cwm[,"SLAm"],pr_sp[,"SLAm"])
abline(0,1, col  = "red")
plot(pr_cwm[,"LNCm"],pr_sp[,"LNCm"])
abline(0,1, col  = "red")
plot(pr_cwm[,"Height"],pr_sp[,"Height"])
abline(0,1, col  = "red")
View(X_new)
View(traits_spp)
View(trait_prep)
# re-arrange X
all(rownames(sites_spp) == rownames(X))
rownames(sites_spp)
rownames(X)
View(traits_spp)
View(trait_prep)
sapply(1:3, function(i) cor(pr_cwm[,i], CWM[,i])^2)
sapply(1:3, function(i) cor(pr_sp[,i], CWM[,i])^2)
sapply(1:3, function(i) cor(pr_sp[,i], CWM[,i])^2)
sapply(1:3, function(i) cor(pr_cwm[,i], CWM[,i])^2)
sum(pr_sp[,i]- CWM[,i])
i= 1
sum(pr_sp[,i]- CWM[,i])
(pr_sp[,i]- CWM[,i]^2)
(pr_sp[,i]- CWM[,i])^2
sapply(1:3, function(i) sqrt(sum((pr_sp[,i]- CWM[,i])^2)))
sapply(1:3, function(i) sqrt(sum((pr_cwm[,i]- CWM[,i])^2)))
sapply(1:3, function(i) sqrt(sum((pr_sp[,i]- CWM[,i])^2)))
sapply(1:3, function(i) sqrt(sum((pr_cwm[,i]- CWM[,i])^2)))
n=100
J=10
beta=runif(2,min=-5,max=5)
x=cbind(1,runif(n,min=0,max=2))
sigma=1
Y=dist=vector()
for(i in 1:n){
Y_i = rnorm(J,mean=beta * x[i,],sd=sqrt(sigma))
Y=c(Y, Y_i)
dist=c(dist, (Y_i - beta * x[i,])^2)
}
intra_var = sum(dist)/(n*J-1)
print(intra_var) # ~ 1 of course
X=x[rep(seq_len(nrow(x)), each=J), ]
X=X[,-1]
m0=lm(Y~X)
summary(m0)
Y=matrix(Y,nrow=J)
Y=apply(Y,mean,MARGIN=2)
sum((Y - x %*% beta)^2)/(n-1) #1.5 greater than true intra comm
m1=lm(Y~x[,-1])
summary(m1)
dim(Y)
length(Y)
n=100
J=100
beta=runif(2,min=-5,max=5)
x=cbind(1,runif(n,min=0,max=2))
sigma=1
Y=as.data.frame(matrix(NA,nrow=n,ncol=J))
for(i in 1:n){
Y[i,] = rnorm(J,mean=beta * x[i,],sd=sqrt(sigma))
}
colnames(x)=c("int","x")
dim(Y)
rank(as.matrix(X_new))
?rank
library(Matrix)
rankMatrix(as.matrix(X_new))
?jtdm
?jtdm_fit
jtdm_fit(trait_prep, X_new, as.formula("~GDD+FDD+forest"))
jtdm_fit(as.matrix(trait_prep), as.matrix(X_new), as.formula("~GDD+FDD+forest"))
source("~/Documents/GitHub/jtdm/R/jtdm_fit.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.path='Fig/')
data(X) #env variables
data(Y) #site x CWM traits matrix
formula=as.formula("~poly(GDD,2)+poly(FDD,2)+poly(GDD,2):forest+poly(FDD,2):forest")
# Run the model. If you want this vignette to run fast (buth with unreliable results), you should diminish the parameter 'sample'. To obtain the results of the publications, we set adapt = 5000, burnin = 10000, sample = 10000.
m = jtdm_fit(Y=Y, X=X,
formula=formula,
sample = 10000)
library(jtdm)
source("~/Documents/GitHub/jtdm/R/jtdm_fit.R")
# Run the model. If you want this vignette to run fast (buth with unreliable results), you should diminish the parameter 'sample'. To obtain the results of the publications, we set adapt = 5000, burnin = 10000, sample = 10000.
m = jtdm_fit(Y=Y, X=X,
formula=formula,
sample = 10000)
library(mviw)
library(mniw)
# Run the model. If you want this vignette to run fast (buth with unreliable results), you should diminish the parameter 'sample'. To obtain the results of the publications, we set adapt = 5000, burnin = 10000, sample = 10000.
m = jtdm_fit(Y=Y, X=X,
formula=formula,
sample = 10000)
source("~/Documents/GitHub/jtdm/R/jtdm_fit.R")
# Run the model. If you want this vignette to run fast (buth with unreliable results), you should diminish the parameter 'sample'. To obtain the results of the publications, we set adapt = 5000, burnin = 10000, sample = 10000.
m = jtdm_fit(Y=Y, X=X,
formula=formula,
sample = 10000)
source("~/Documents/GitHub/jtdm/R/jtdm_fit.R")
# Run the model. If you want this vignette to run fast (buth with unreliable results), you should diminish the parameter 'sample'. To obtain the results of the publications, we set adapt = 5000, burnin = 10000, sample = 10000.
m = jtdm_fit(Y=Y, X=X,
formula=formula,
sample = 10000)
# get the regression coefficient matrix
B = getB(m  = m)
# compute standardised effect sizez
B_stand = B
source("~/Documents/GitHub/jtdm/R/getB.R")
source("~/Documents/GitHub/jtdm/R/jtdm_predict.R")
# get the regression coefficient matrix
B = getB(m  = m)
# compute standardised effect sizez
B_stand = B
for(i in 1:nrow(B$Bsamples)){
for(j in 2:ncol(B$Bsamples))
B_stand$Bsamples[i,j,] = sd(m$X[,j])*B$Bsamples[i,j,]/sd(m$Y[,i])
}
B_stand$Bsamples=B_stand$Bsamples[,-1,]
B_stand$Bmean = apply( B_stand$Bsamples, mean, MARGIN=c(1,2))
B_stand$Bq975 = apply( B_stand$Bsamples, quantile, MARGIN=c(1,2),0.975)
B_stand$Bq025 = apply( B_stand$Bsamples, quantile, MARGIN=c(1,2),0.025)
# build the table for ggplot
tableB_stand = data.frame(B= as.vector(B_stand$Bmean),
B97=as.vector(B_stand$Bq975),
B02 = as.vector(B_stand$Bq025),
trait = rep(colnames(Y),ncol(m$X)-1),
predictor = rep(c("GDD","GDD","FDD","FDD","GDD","GDD","FDD","FDD"),
each=ncol(Y)),
type= rep(c(1,2,1,2,3,4,3,4),each=ncol(Y)),
interaction_with_forest=rep(c("no","no","no","no","yes",
"yes","yes","yes"),
each=ncol(Y))
)
#check if significant or not
tableB_stand[,"significant"] = ifelse(sign(tableB_stand$B97)==sign((tableB_stand$B02)),"yes","no")
#plot
ggplot(data = tableB_stand,
aes(x = B, y = type, color = significant)) +
geom_point(aes(shape=interaction_with_forest),size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait ~ predictor) +
ylim(c(0,4)) + theme_minimal()+
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
library(ggplot2)
#plot
ggplot(data = tableB_stand,
aes(x = B, y = type, color = significant)) +
geom_point(aes(shape=interaction_with_forest),size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait ~ predictor) +
ylim(c(0,4)) + theme_minimal()+
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
Sigma = get_sigma(m = m)
grid.length=200 #length of the gradient of the focal environmental variable
Xnameplot = c("GDD","FDD")
k=0 #counter
for(i in 1:(ncol(X)-1)){#for each environmental variable
indexGradient=i
###### Build the XGradient_new matrices (a dataset with the gradient of the focal variable
#     and all other ones set to their respective mean), one for open habitat and one for forests.
# First build the gradient of the vocal variable
XGradientFocal_open=  seq(from=min(X[,indexGradient]),
to=max(X[,indexGradient]),
length.out=grid.length)
XGradientFocal_for=  seq(from=min(X[which(X[,"forest"]==1),indexGradient]),
to=max(X[,indexGradient]),
length.out=grid.length)
# Fill the XGradient_new matrices
XGradient_new_open = matrix(nrow=grid.length,ncol=ncol(X))
XGradient_new_for = matrix(nrow=grid.length,ncol=ncol(X))
for(j in 1:ncol(X)){
if(j == indexGradient){
XGradient_new_open[,j] = XGradientFocal_open
XGradient_new_for[,j] = XGradientFocal_for
}else{
#in open habitat, forest=0
XGradient_new_open[,j] = mean(X[which(X[,"forest"]==0),j])
#in forest, forest=1
XGradient_new_for[,j] = mean(X[which(X[,"forest"]==1),j])
}
}
colnames(XGradient_new_open) =  colnames(XGradient_new_for) = colnames(X)
# Predict the value of traits when evaluated in XGradient_new matrices
PartialPredictions_for = jtdm_predict(m=m,Xnew=XGradient_new_for, FullPost="mean")
PartialPredictions_open = jtdm_predict(m=m,Xnew=XGradient_new_open, FullPost="mean")
# Build a plot for each trait-environment combination
for(j in 1:ncol(Y)){
k=k+1
assign(paste0("table_",k),
data.frame(x = c(XGradientFocal_for,XGradientFocal_open),
Predmean = c(PartialPredictions_for$PredMean[,j],
PartialPredictions_open$PredMean[,j]),
Pred975 = c(PartialPredictions_for$Predq975[,j],PartialPredictions_open$Predq975[,j]),
Pred025=c(PartialPredictions_for$Predq025[,j],PartialPredictions_open$Predq025[,j]),
type = c(rep("forest",times=grid.length),rep("open",times=grid.length))))
assign(paste0("p_",k),
ggplot() +
geom_line(data=get(paste0("table_",k)), aes(x=x, y=Predmean,col=type)) +
geom_ribbon(data=get(paste0("table_",k)),
aes(x=x,y=Predmean,ymin=Pred025,ymax=Pred975,col=type),linetype=2,alpha=0.3)+
geom_rug(data=data.frame(x=X[,indexGradient]),aes(x=x),sides="b") +
xlab(Xnameplot[indexGradient]) + ylab(colnames(Y)[j]) + theme_minimal() #+  theme(legend.position="none")
)
}
}
for(i in 1:(ncol(X)-1)){#for each environmental variable
indexGradient=i
###### Build the XGradient_new matrices (a dataset with the gradient of the focal variable
#     and all other ones set to their respective mean), one for open habitat and one for forests.
# First build the gradient of the vocal variable
XGradientFocal_open=  seq(from=min(X[,indexGradient]),
to=max(X[,indexGradient]),
length.out=grid.length)
XGradientFocal_for=  seq(from=min(X[which(X[,"forest"]==1),indexGradient]),
to=max(X[,indexGradient]),
length.out=grid.length)
# Fill the XGradient_new matrices
XGradient_new_open = matrix(nrow=grid.length,ncol=ncol(X))
XGradient_new_for = matrix(nrow=grid.length,ncol=ncol(X))
for(j in 1:ncol(X)){
if(j == indexGradient){
XGradient_new_open[,j] = XGradientFocal_open
XGradient_new_for[,j] = XGradientFocal_for
}else{
#in open habitat, forest=0
XGradient_new_open[,j] = mean(X[which(X[,"forest"]==0),j])
#in forest, forest=1
XGradient_new_for[,j] = mean(X[which(X[,"forest"]==1),j])
}
}
colnames(XGradient_new_open) =  colnames(XGradient_new_for) = colnames(X)
# Predict the value of traits when evaluated in XGradient_new matrices
PartialPredictions_for = jtdm_predict(m=m,Xnew=XGradient_new_for, FullPost="mean")
PartialPredictions_open = jtdm_predict(m=m,Xnew=XGradient_new_open, FullPost="mean")
# Build a plot for each trait-environment combination
for(j in 1:ncol(Y)){
k=k+1
assign(paste0("table_",k),
data.frame(x = c(XGradientFocal_for,XGradientFocal_open),
Predmean = c(PartialPredictions_for$PredMean[,j],
PartialPredictions_open$PredMean[,j]),
Pred975 = c(PartialPredictions_for$Predq975[,j],PartialPredictions_open$Predq975[,j]),
Pred025=c(PartialPredictions_for$Predq025[,j],PartialPredictions_open$Predq025[,j]),
type = c(rep("forest",times=grid.length),rep("open",times=grid.length))))
assign(paste0("p_",k),
ggplot() +
geom_line(data=get(paste0("table_",k)), aes(x=x, y=Predmean,col=type)) +
geom_ribbon(data=get(paste0("table_",k)),
aes(x=x,y=Predmean,ymin=Pred025,ymax=Pred975,col=type),linetype=2,alpha=0.3)+
geom_rug(data=data.frame(x=X[,indexGradient]),aes(x=x),sides="b") +
xlab(Xnameplot[indexGradient]) + ylab(colnames(Y)[j]) + theme_minimal() #+  theme(legend.position="none")
)
}
}
# Put all the plots together
eval(parse(text=paste0("p=as_ggplot(arrangeGrob(",paste(paste0("p_",c(1,4,2,5,3,6)),collapse=","),",nrow=3,ncol=2))")))
library(ggpubr)
library(gridExtra)
# Put all the plots together
eval(parse(text=paste0("p=as_ggplot(arrangeGrob(",paste(paste0("p_",c(1,4,2,5,3,6)),collapse=","),",nrow=3,ncol=2))")))
p
#setwd("~/Documents/Phd/Traits_joint/jtdm/jtdm")
setwd("~/Documents/GitHub/jtdm")
devtools::check(vignettes = T)
devtools::document() #wrapper for roxygenize
unloadNamespace("jtdm")
devtools::document() #wrapper for roxygenize
rm(getB)
rm(jtdm_fit)
rm(jtdm_predict)
devtools::document() #wrapper for roxygenize
build_manual(pkg = ".", path = "../")
install("jtdm")
library(devtools)
library(roxygen2)
library(usethis)
library(pkgdown)
library(rhub)
install("jtdm")
setwd("..")
install("jtdm")
library(jtdm)
#setwd("~/Documents/Phd/Traits_joint/jtdm/jtdm")
setwd("~/Documents/GitHub/jtdm")
devtools::check(vignettes = T)
