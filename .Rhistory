jtdm_fit(trait_prep, X_new, as.formula("~GDD+FDD+forest"))
jtdm_fit(as.matrix(trait_prep), as.matrix(X_new), as.formula("~GDD+FDD+forest"))
#setwd("~/Documents/Phd/Traits_joint/jtdm/jtdm")
setwd("~/Documents/GitHub/jtdm")
# Check on other systems
# Asked by CRAN
# Windows
devtools::check_win_devel()
rhub::check()
# Verify you're ready for release, and release
devtools::release()
m
library(jtdm)
?jtdm_fit
m = jtdm_fit(Y=Y, X=X, formula=as.formula("~GDD+FDD+forest"), sample = 1000)
m
as.vector(coef(getB(m)$Bmean))
aa = getB(m)
as.vector(aa$Bmean)
aa$Bmean
table = data.frame(x = as.vector(coef(SDM$model)), y = rownames(aa$Bmean))
table = data.frame(x = as.vector(aa$Bmean), y = rownames(aa$Bmean))
p = ggplot(data = table) + geom_point(aes(x,y)) + labs(x = "", y = "") +
geom_vline(xintercept=0, lty =2, alpha = 0.5) +
theme_classic() +  theme(axis.text.y = element_text(face="bold", size=13)) +
ggtitle(paste0("Species : ", SDM$sp.name))
library(ggplot2)
p = ggplot(data = table) + geom_point(aes(x,y)) + labs(x = "", y = "") +
geom_vline(xintercept=0, lty =2, alpha = 0.5) +
theme_classic() +  theme(axis.text.y = element_text(face="bold", size=13)) +
ggtitle(paste0("Species : ", SDM$sp.name))
B = getB(m)$Bmean
x = "SLA"
table = data.frame(x = as.vector(Bmean[x,]), y = colnames(B))
table = data.frame(x = as.vector(B[x,]), y = colnames(B))
table
B = getB(m)
as.vector(B$Bmean)
B$Bmean
table = data.frame(B = as.vector(B$Bmean), y = colnames(B$Bmean),
B97=as.vector(B_stand$Bq975),
B02 = as.vector(B_stand$Bq025),
trait = rep(rownames(B$Bmean),ncol(m$X)),
predictor = rep(colnames(B$Bmean), each = nrow(B$Bmean))
)
table = data.frame(B = as.vector(B$Bmean), y = colnames(B$Bmean),
B97=as.vector(B$Bq975),
B02 = as.vector(B$Bq025),
trait = rep(rownames(B$Bmean),ncol(m$X)),
predictor = rep(colnames(B$Bmean), each = nrow(B$Bmean))
)
table
table = data.frame(B = as.vector(B$Bmean),
B97=as.vector(B$Bq975),
B02 = as.vector(B$Bq025),
trait = rep(rownames(B$Bmean),ncol(m$X)),
predictor = rep(colnames(B$Bmean), each = nrow(B$Bmean))
)
table = data.frame(B = as.vector(B$Bmean),
B97=as.vector(B$Bq975),
B02 = as.vector(B$Bq025),
trait = rep(rownames(B$Bmean),ncol(m$X)),
predictor = rep(colnames(B$Bmean), each = nrow(B$Bmean))
)
tableB_stand[,"significant"] = ifelse(sign(table$B97)==sign((table$B02)),"yes","no")
ggplot(data = table,
aes(x = B, color = significant)) +
geom_point(size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait ~ predictor) +
ylim(c(0,4)) + theme_minimal()+
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
ggplot(data = table,
aes(x = B, color = significant)) +
geom_point(size=2)
table[,"significant"] = ifelse(sign(table$B97)==sign((table$B02)),"yes","no")
ggplot(data = table, aes(x = B, color = significant)) +
geom_point(size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait ~ predictor) +
ylim(c(0,4)) + theme_minimal()+
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
table
ggplot(data = table, aes(x = B, color = significant)) +
geom_point(size=2)
ggplot(data = table, aes(x = Bm, color = significant)) +
geom_point(size=2)
ggplot(data = table, aes(x = Bm, color = significant))
head(table)
table = data.frame(Bm = as.vector(B$Bmean),
B97=as.vector(B$Bq975),
B02 = as.vector(B$Bq025),
trait = rep(rownames(B$Bmean),ncol(m$X)),
predictor = rep(colnames(B$Bmean), each = nrow(B$Bmean))
)
table[,"significant"] = ifelse(sign(table$B97)==sign((table$B02)),"yes","no")
ggplot(data = table, aes(x = Bm, color = significant))
ggplot(data = table, aes(x = Bm, color = significant)) +
geom_point(size=2)
head(table)
ggplot(data = table, aes(x = Bm, color = significant)) +
geom_point(size=2)
ggplot(data = table, aes(x = Bm, y = predictor, color = significant)) +
geom_point(size=2)
ggplot(data = table, aes(x = Bm, y = predictor, color = significant)) +
geom_point(size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(.~ trait)
ggplot(data = table, aes(x = Bm, y = predictor, color = significant)) +
geom_point(size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait~.)
table
ggplot(data = table, aes(x = Bm, y = predictor, color = significant)) +
geom_point(size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait~.) +
ylim(c(0,4)) + theme_minimal()+
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
ggplot(data = table, aes(x = Bm, y = predictor, color = significant)) +
geom_point(size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait~.) +
ylim(c(0,4)) + theme_minimal()
ggplot(data = table, aes(x = Bm, y = predictor, color = significant)) +
geom_point(size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait~.)
ggplot(data = table, aes(x = Bm, y = predictor, color = significant)) +
geom_point(size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait~.) +
theme_minimal()
ggplot(data = table, aes(x = Bm, y = predictor, color = significant)) +
geom_point(size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait~.) +
theme_minimal()+
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
ggplot(data = table, aes(x = Bm, y = predictor, color = significant)) +
geom_point(size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait~.) +
theme_minimal()+
theme(axis.title.y = element_blank(),axis.title.x=element_blank())
talbe
table
class(m)
Sigma = get_sigma(m = m)
Sigma_sign = ifelse(sign(Sigma$Sq025)==sign(Sigma$Sq975),1,0)
Sigma_plot = cov2cor(Sigma$Smean) * Sigma_sign
colnames(Sigma_plot) = rownames(Sigma_plot) = colnames(Y)
corrplot::corrplot(Sigma_plot,method="color" ,type="upper", order="hclust",
addCoef.col = "black", # Ajout du coefficient de corrélation
tl.col="black",tl.cex=2, diag=FALSE)
?jtdm_fit
paste0(colnames(m$Y),collapse = ", ")
m$formula
gsub("~","", m$formula)
sub("~","", m$formula)
sub("~","", m$formula)[2]
cat("================================================================== \n")
model = paste0("JTDM to model ", paste0(colnames(m$Y),collapse = ", "), "\n",
"as a function of ", sub("~","", m$formula)[2],".\n",
"Likelihood of the model: ", m$model$log.lik)
cat(model)
cat("================================================================== \n")
cat("* Useful S3 methods and functions to get and show inferred parameters: \n")
cat("plot(), getB(), get_sigma() \n")
cat("* Useful functions to predict marginally and jointly: \n")
cat("jtdm_predict(), jtdmCV(), joint_trait_prob() \n")
cat("* Function to plot partial response curves of the envelope of possible: \n")
cat("ellipse_plot()\n")
cat("* Function to compute partial response curves of joint probabilities: \n")
cat("joint_trait_prob_gradient() \n")
cat("================================================================== \n")
cat("================================================================== \n")
model = paste0("JTDM to model ", paste0(colnames(m$Y),collapse = ", "), "\n",
"as a function of ", sub("~","", m$formula)[2],".\n",
"Likelihood of the model: ", m$model$log.lik, " \n")
cat(model)
cat("================================================================== \n")
cat("* Useful S3 methods and functions to get and show inferred parameters: \n")
cat("plot(), getB(), get_sigma() \n")
cat("* Useful functions to predict marginally and jointly: \n")
cat("jtdm_predict(), jtdmCV(), joint_trait_prob() \n")
cat("* Function to plot partial response curves of the envelope of possible: \n")
cat("ellipse_plot()\n")
cat("* Function to compute partial response curves of joint probabilities: \n")
cat("joint_trait_prob_gradient() \n")
cat("================================================================== \n")
?grid.arrange
library(gridExtra)
?grid.arrange
B = getB(m)
table = data.frame(Bm = as.vector(B$Bmean),
B97=as.vector(B$Bq975),
B02 = as.vector(B$Bq025),
trait = rep(rownames(B$Bmean),ncol(m$X)),
predictor = rep(colnames(B$Bmean), each = nrow(B$Bmean))
)
table[,"significant"] = ifelse(sign(table$B97)==sign((table$B02)),"yes","no")
p_B = ggplot(data = table, aes(x = Bm, y = predictor, color = significant)) +
geom_point(size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait~.) +
theme_minimal()+
theme(axis.title.y = element_blank(),axis.title.x=element_blank())
Sigma = get_sigma(m = m)
Sigma_sign = ifelse(sign(Sigma$Sq025)==sign(Sigma$Sq975),1,0)
Sigma_plot = cov2cor(Sigma$Smean) * Sigma_sign
colnames(Sigma_plot) = rownames(Sigma_plot) = colnames(Y)
p_S = corrplot::corrplot(Sigma_plot,method="color" ,type="upper", order="hclust",
addCoef.col = "black", # Ajout du coefficient de corrélation
tl.col="black",tl.cex=2, diag=FALSE)
if(ncol(m$Y) > 6){
devAskNewPage(TRUE)
p_B
p_S
devAskNewPage(options("device.ask.default")[[1]])
}else{
grid.arrange(p_B, p_S, ncol = 2)
}
class(p_S)
p_S
ggcorrplot(Sigma_plot, hc.order = TRUE, type = "lower",
lab = TRUE)
library(ggcorrplot)
ggcorrplot(Sigma_plot, hc.order = TRUE, type = "lower",
lab = TRUE)
class(p_s)
class(p_S)
p_S = as.ggplot(ggcorrplot(Sigma_plot, hc.order = TRUE, type = "lower",
lab = TRUE))
p_S
ggcorrplot()
ggcorrplot
Sigma_plot
base::round(x = corr, digits = 2)
corr = Sigma_plot
base::round(x = corr, digits = 2)
get_lower_tri(corr, show.diag)
lower.tri(corr, show.diag = T)
lower.tri(corr, diag = T)
corr[lower.tri(corr, diag = T)]
corr[1,1] = NA
corr
corr[which(lower.tri(corr, diag = T) == FALSE)] = NA
corr
corr = Sigma_plot
base::round(x = corr, digits = 2)
corr[which(lower.tri(corr, diag = T) == FALSE)] = NA
corr
corr <- reshape2::melt(corr, na.rm = TRUE)
colnames(corr) <- c("Var1", "Var2", "value")
corr
corr = Sigma_plot
base::round(x = corr, digits = 2)
corr[which(lower.tri(corr, diag = F) == FALSE)] = NA
corr <- reshape2::melt(corr, na.rm = TRUE)
colnames(corr) <- c("Var1", "Var2", "value")
corr
colors = c("blue", "white", "red")
outline.color = "gray"
corr = Sigma_plot
outline.color = "gray"
colors = c("blue", "white", "red")
base::round(x = corr, digits = 2)
corr[which(lower.tri(corr, diag = F) == FALSE)] = NA
corr <- reshape2::melt(corr, na.rm = TRUE)
colnames(corr) <- c("Var1", "Var2", "value")
p <- ggplot2::ggplot(data = corr, mapping = ggplot2::aes_string(x = "Var1",
y = "Var2", fill = "value")) +
geom_tile(color = outline.color) +
scale_fill_gradient2(low = colors[1], high = colors[3],
mid = colors[2], midpoint = 0, limit = c(-1, 1), space = "Lab",
name = legend.title)
p <- ggplot2::ggplot(data = corr, mapping = ggplot2::aes_string(x = "Var1",
y = "Var2", fill = "value")) +
geom_tile(color = outline.color) +
scale_fill_gradient2(low = colors[1], high = colors[3],
mid = colors[2], midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "legend.title")
ggplot2::ggplot(data = corr, mapping = ggplot2::aes_string(x = "Var1",
y = "Var2", fill = "value")) +
geom_tile(color = outline.color) +
scale_fill_gradient2(low = colors[1], high = colors[3],
mid = colors[2], midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "legend.title")
corr
p <- ggplot2::ggplot(data = corr, mapping = ggplot2::aes_string(x = "Var1",
y = "Var2", fill = "value")) +
geom_tile(color = outline.color) +
scale_fill_gradient2(low = colors[1], high = colors[3],
mid = colors[2], midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
geom_text(mapping = aes_string(x = "Var1", y = "Var2"), label = label, color = "black", size = 2)
label <- round(x = corr[, "value"], digits = digits)
p <- ggplot2::ggplot(data = corr, mapping = ggplot2::aes_string(x = "Var1",
y = "Var2", fill = "value")) +
geom_tile(color = outline.color) +
scale_fill_gradient2(low = colors[1], high = colors[3],
mid = colors[2], midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
geom_text(mapping = aes_string(x = "Var1", y = "Var2"), label = label, color = "black", size = 2)
label <- round(x = corr[, "value"], digits = digits)
label <- round(x = corr[, "value"], digits = 2)
p <- ggplot2::ggplot(data = corr, mapping = ggplot2::aes_string(x = "Var1",
y = "Var2", fill = "value")) +
geom_tile(color = outline.color) +
scale_fill_gradient2(low = colors[1], high = colors[3],
mid = colors[2], midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
geom_text(mapping = aes_string(x = "Var1", y = "Var2"), label = label, color = "black", size = 2)
p
ggplot2::ggplot(data = corr, mapping = ggplot2::aes_string(x = "Var1",
y = "Var2", fill = "value")) +
geom_tile(color = outline.color) +
scale_fill_gradient2(low = colors[1], high = colors[3],
mid = colors[2], midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
geom_text(mapping = aes_string(x = "Var1", y = "Var2"), label = label, color = "black", size = 5)
p <- ggplot2::ggplot(data = corr, mapping = ggplot2::aes_string(x = "Var1",
y = "Var2", fill = "value")) +
geom_tile(color = outline.color) +
scale_fill_gradient2(low = colors[1], high = colors[3],
mid = colors[2], midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
geom_text(mapping = aes_string(x = "Var1", y = "Var2"), label = label, color = "black", size = 5) + theme_classic()
ggplot2::ggplot(data = corr, mapping = ggplot2::aes_string(x = "Var1",
y = "Var2", fill = "value")) +
geom_tile(color = outline.color) +
scale_fill_gradient2(low = colors[1], high = colors[3],
mid = colors[2], midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
geom_text(mapping = aes_string(x = "Var1", y = "Var2"), label = label, color = "black", size = 5) + theme_classic()
ggplot2::ggplot(data = corr, mapping = ggplot2::aes_string(x = "Var1",
y = "Var2", fill = "value")) +
geom_tile(color = outline.color) +
scale_fill_gradient2(low = colors[1], high = colors[3],
mid = colors[2], midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
geom_text(mapping = aes_string(x = "Var1", y = "Var2"), label = label, color = "black", size = 5) + theme_minimal()
ggplot2::ggplot(data = corr, mapping = ggplot2::aes_string(x = "Var1",
y = "Var2", fill = "value")) +
geom_tile(color = outline.color) +
scale_fill_gradient2(low = colors[1], high = colors[3],
mid = colors[2], midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
geom_text(mapping = aes_string(x = "Var1", y = "Var2"), label = label, color = "black", size = 5) + theme_minimal() +
theme(axis.title.y = element_blank(),axis.title.x=element_blank())
base::round(x = corr, digits = 2)
corr = Sigma_plot
base::round(x = corr, digits = 2)
corr = base::round(x = Sigma_plot, digits = 2)
corr[which(lower.tri(corr, diag = F) == FALSE)] = NA
corr <- reshape2::melt(corr, na.rm = TRUE)
colnames(corr) <- c("Var1", "Var2", "value")
corr[, "value"]
B = getB(m)
table = data.frame(Bm = as.vector(B$Bmean),
B97=as.vector(B$Bq975),
B02 = as.vector(B$Bq025),
trait = rep(rownames(B$Bmean),ncol(m$X)),
predictor = rep(colnames(B$Bmean), each = nrow(B$Bmean))
)
table[,"significant"] = ifelse(sign(table$B97)==sign((table$B02)),"yes","no")
p_B = ggplot(data = table, aes(x = Bm, y = predictor, color = significant)) +
geom_point(size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait~.) +
theme_minimal()+
theme(axis.title.y = element_blank(),axis.title.x=element_blank())
Sigma = get_sigma(m = m)
Sigma_sign = ifelse(sign(Sigma$Sq025)==sign(Sigma$Sq975),1,0)
Sigma_plot = cov2cor(Sigma$Smean) * Sigma_sign
colnames(Sigma_plot) = rownames(Sigma_plot) = colnames(Y)
corr = base::round(x = Sigma_plot, digits = 2)
corr[which(lower.tri(corr, diag = F) == FALSE)] = NA
corr <- reshape2::melt(corr, na.rm = TRUE)
colnames(corr) <- c("Var1", "Var2", "value")
label <- corr[, "value"]
p_S <- ggplot2::ggplot(data = corr, mapping = ggplot2::aes_string(x = "Var1",
y = "Var2", fill = "value")) +
geom_tile(color = "gray") +
scale_fill_gradient2(low = "blue", high = "red",
mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
geom_text(mapping = aes_string(x = "Var1", y = "Var2"), label = label, color = "black", size = 5) + theme_minimal() +
theme(axis.title.y = element_blank(),axis.title.x=element_blank())
devAskNewPage(TRUE)
p_B
devAskNewPage(TRUE)
p_B
p_S
devAskNewPage(TRUE)
for (i in 1:3) if(i == 1){ plot(p_B) }else{plot(p_S)}
devAskNewPage(options("device.ask.default")[[1]])
grid.arrange(p_B, p_S, ncol = 2)
grid.arrange(p_B, p_S, ncol = 1)
#setwd("~/Documents/Phd/Traits_joint/jtdm/jtdm")
setwd("~/Documents/GitHub/jtdm")
devtools::document() #wrapper for roxygenize
# Check spelling
library(spelling)
# Check as CRAN
rcmdcheck::rcmdcheck (args = c("--no-manual", "--as-cran"))
# Check as CRAN
rcmdcheck::rcmdcheck (args = c("--no-manual", "--as-cran"))
devtools::document()
# Check as CRAN
rcmdcheck::rcmdcheck (args = c("--no-manual", "--as-cran"))
devtools::document()
# Check as CRAN
rcmdcheck::rcmdcheck (args = c("--no-manual", "--as-cran"))
plot(m)
# Short MCMC to obtain a fast example: results are unreliable !
m = jtdm_fit(Y = Y, X = X, formula = as.formula("~poly(GDD,2)+poly(FDD,2)+poly(GDD,2):forest+poly(FDD,2):forest"),
sample = 100)
plot(m)
knitr::opts_chunk$set(fig.path='figures/',
collapse = TRUE,
comment = "#>"
)
rm(list = ls())
library(devtools)
install_github("giopogg/jtdm")
library(jtdm)
library(ggplot2)
data(Y)
summary(Y)
data(X)
summary(X)
# Short MCMC to obtain a fast example: results are unreliable !
m = jtdm_fit(Y = Y, X = X, formula = as.formula("~poly(GDD,2)+poly(FDD,2)+poly(GDD,2):forest+poly(FDD,2):forest"),
sample = 100)
summary(m)
# Inferred parameters
B = getB(m)
Sigma = get_sigma(m)$Smean
plot(m)
B = getB(m)
table = data.frame(Bm = as.vector(B$Bmean),
B97=as.vector(B$Bq975),
B02 = as.vector(B$Bq025),
trait = rep(rownames(B$Bmean),ncol(m$X)),
predictor = rep(colnames(B$Bmean), each = nrow(B$Bmean))
)
table[,"significant"] = ifelse(sign(table$B97)==sign((table$B02)),"yes","no")
p_B = ggplot(data = table, aes(x = Bm, y = predictor, color = significant)) +
geom_point(size=2) +
geom_errorbarh(aes(xmax = B97, xmin = B02, height = 0)) +
geom_vline(xintercept=0,linetype="dashed") +
facet_grid(trait~.) +
theme_minimal()+
theme(axis.title.y = element_blank(),axis.title.x=element_blank())
Sigma = get_sigma(m = m)
Sigma_sign = ifelse(sign(Sigma$Sq025)==sign(Sigma$Sq975),1,0)
Sigma_plot = cov2cor(Sigma$Smean) * Sigma_sign
colnames(Sigma_plot) = rownames(Sigma_plot) = colnames(Y)
corr = base::round(x = Sigma_plot, digits = 2)
corr[which(lower.tri(corr, diag = F) == FALSE)] = NA
corr <- reshape2::melt(corr, na.rm = TRUE)
colnames(corr) <- c("Var1", "Var2", "value")
label <- corr[, "value"]
p_S <- ggplot2::ggplot(data = corr, mapping = ggplot2::aes_string(x = "Var1",
y = "Var2", fill = "value")) +
geom_tile(color = "gray") +
scale_fill_gradient2(low = "blue", high = "red",
mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
geom_text(mapping = aes_string(x = "Var1", y = "Var2"), label = label, color = "black", size = 5) + theme_minimal() +
theme(axis.title.y = element_blank(),axis.title.x=element_blank())
class(p_S)
plot(p_S)
p_S
plot(p_S)
# Check as CRAN
rcmdcheck::rcmdcheck (args = c("--no-manual", "--as-cran"))
# Sample B
B = rMT(n = sample,
Lambda = B_bar,
SigmaC = solve(df_post * (solve(D) + t(X) %*% X)),
SigmaR = G,
nu = df_post)
# Check as CRAN
rcmdcheck::rcmdcheck (args = c("--no-manual", "--as-cran"))
# Check on other systems
# Asked by CRAN
# Windows
devtools::check_win_devel()
# Check as CRAN
rcmdcheck::rcmdcheck (args = c("--no-manual", "--as-cran"))
devtools::document()
# Check on other systems
# Asked by CRAN
# Windows
devtools::check_win_devel()
# Check as CRAN
rcmdcheck::rcmdcheck (args = c("--no-manual", "--as-cran"))
