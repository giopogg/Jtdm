n
n=89
load("/Users/poggiatg/Documents/GitHub/conditionalPLN/Cluster/Res/Simul/Direct_no_env_many.n/Sim_Direct_no_env_many.n.RData")
n
rm(n)
load("/Users/poggiatg/Documents/GitHub/conditionalPLN/Cluster/Res/Simul/Direct_no_env/Sim_Direct_no_env.RData")
n
dirRes
# Kind of simulation?
#SimulType = "noRemStruc"
#SimulType = "Direct"
#SimulType = "TrueData"
SimulType = "Direct_no_env"
# only for Direct_no_env, it creates (way more) data
many.n = T
if(many.n) SimulType = "Direct_no_env_many.n"
dirData <- paste0(wd,"../Data/");
dirRes <- paste0(wd,"Res/Simul/", SimulType,"/")
load(paste0(dirData,'BarentsFish.Rdata'))
load(file = paste0(dirRes,"Sim_",SimulType,".RData"))
dirRes
rm(list=ls())
wd = "~/Documents/GitHub/conditionalPLN/Cluster/"
setwd(wd)
source("condPred.R")
source("VEstep.R")
source("FunctionsImprovedVEM.R")
# Kind of simulation?
#SimulType = "noRemStruc"
#SimulType = "Direct"
#SimulType = "TrueData"
SimulType = "Direct_no_env"
# only for Direct_no_env, it creates (way more) data
many.n = F
if(many.n) SimulType = "Direct_no_env_many.n"
dirData <- paste0(wd,"../Data/");
dirRes <- paste0(wd,"Res/Simul/", SimulType,"/")
load(paste0(dirData,'BarentsFish.Rdata'))
n
load(file = paste0(dirRes,"Sim_",SimulType,".RData"))
n
# Store CV results
V <- 3; B <- 100
cvFile <- paste0(dirRes, 'PLNcv-V', V, '-B', B,'.Rdata')
fitCV = F
O = matrix(0, n, p)
fitInit <- PLN(YSimul ~ 1,data=data.frame(XAll))
vemInit <- list(Theta=fitInit$model_par$Theta, Omega=solve(fitInit$model_par$Sigma),
M=fitInit$var_par$M, S2=fitInit$var_par$S2)
fitAll = additionalFit(vemInit, fitInit, XAll, YSimul, O = matrix(0, n, p) )
log.lik = ELBO(X = XAll, Y = YSimul, O = matrix(0, n, p), Theta = coef(fitAll),
Omega = solve(sigma(fitAll)), M = fitAll$var_par$M, S2 = fitAll$var_par$S2)["elbo"]
additionalFit
source("condPred.R")
source("VEstep.R")
source("FunctionsImprovedVEM.R")
dirRes
# Fit full data
O = matrix(0, n, p)
fitInit <- PLN(YSimul ~ Latitude + Longitude + Depth + Temperature,data=data.frame(XAll))
O = matrix(0, n, p)
fitInit <- PLN(YSimul ~ 1,data=data.frame(XAll))
vemInit <- list(Theta=fitInit$model_par$Theta, Omega=solve(fitInit$model_par$Sigma),
M=fitInit$var_par$M, S2=fitInit$var_par$S2)
fitAll = additionalFit(vemInit, fitInit, XAll, YSimul, O = matrix(0, n, p) )
log.lik = ELBO(X = XAll, Y = YSimul, O = matrix(0, n, p), Theta = coef(fitAll),
Omega = solve(sigma(fitAll)), M = fitAll$var_par$M, S2 = fitAll$var_par$S2)["elbo"]
save(fitAll, file=paste0(dirRes, "fitFile.RData"))
library(PLNmodels)
library(reshape2)
library(mvtnorm)
library(ggplot2)
library(vegan)
library(ggplot2)
library(corrplot)
rm(list=ls())
wd = "~/Documents/GitHub/conditionalPLN/Cluster/"
setwd(wd)
source("condPred.R")
source("VEstep.R")
source("FunctionsImprovedVEM.R")
# Kind of simulation?
#SimulType = "noRemStruc"
#SimulType = "Direct"
#SimulType = "TrueData"
SimulType = "Direct_no_env"
# only for Direct_no_env, it creates (way more) data
many.n = F
if(many.n) SimulType = "Direct_no_env_many.n"
dirData <- paste0(wd,"../Data/");
dirRes <- paste0(wd,"Res/Simul/", SimulType,"/")
rm(list=ls())
wd = "~/Documents/GitHub/conditionalPLN/Cluster/"
setwd(wd)
source("condPred.R")
source("VEstep.R")
source("FunctionsImprovedVEM.R")
# Kind of simulation?
#SimulType = "noRemStruc"
#SimulType = "Direct"
#SimulType = "TrueData"
SimulType = "Direct_no_env"
# only for Direct_no_env, it creates (way more) data
many.n = T
if(many.n) SimulType = "Direct_no_env_many.n"
dirData <- paste0(wd,"../Data/");
dirRes <- paste0(wd,"Res/Simul/", SimulType,"/")
#load dataset
runSimul = !file.exists(paste0(dirRes,"Sim_",SimulType,".Rdata"))
runSimul
#Number of indicatrice spp
IndSpp = 10
if(runSimul){
if(SimulType == "noRemStruc"){
load(paste0(dirData,'BarentsFish.Rdata'))
#Fit PLN
fitAll <- PLN(Y ~ Latitude + Longitude + Depth + Temperature,data=data.frame(X))
BAll <- fitAll$model_par$Theta
# If you want to increase n, sample data by keeping variables mean and sd
# n = 500
# XAll = as.matrix(data.frame(1, Latitude = rnorm(n,mean = mean(X[,"Latitude"]), sd=sd(X[,"Latitude"])),
#                   Longitude = rnorm(n,mean = mean(X[,"Longitude"]), sd=sd(X[,"Longitude"])),
#                   Depth = rnorm(n,mean = mean(X[,"Depth"]), sd=sd(X[,"Depth"])),
#                   Temperature = rnorm(n,mean = mean(X[,"Temperature"]), sd=sd(X[,"Temperature"]))))
XAll <- X
# Modify Sigma
SigAll <- fitAll$model_par$Sigma
OmegaAll <- solve(SigAll)
OmegaSim = OmegaAll
OmegaSim[(IndSpp+1):p,(IndSpp+1):p] = 0
diag(OmegaSim) = diag(OmegaAll)
SigmaSim = solve(OmegaSim)
ZSimul = XAll %*% t(BAll) + rmvnorm(n, sigma = SigmaSim)
YSimul = t(sapply(1:n,
function(s) rpois(p, exp(ZSimul[s,]))))
colnames(ZSimul) = colnames(YSimul) = rownames(BAll) =
colnames(OmegaSim) = colnames(SigmaSim) = rownames(OmegaSim) = rownames(SigmaSim) = paste0("Y",1:30)
# Represent the matrix
pdf(paste0(dirRes,"../OmegaSim.pdf"))
corrplot(cov2cor(OmegaSim), type="upper", tl.col="black", tl.srt=45)
dev.off()
save(XAll, BAll, ZSimul, YSimul, SigmaSim, OmegaSim,
file = paste0(dirRes,"../Sim_",SimulType,".RData"))
}
if(SimulType == "Direct"){
# Create data by first sampling the indicator species
# Then, sample the remaining species as a function of the indicator ones
load(paste0(dirData,'BarentsFish.Rdata'))
#Fit PLN
fitAll <- PLN(Y ~ Latitude + Longitude + Depth + Temperature,data=data.frame(X))
BAll <- fitAll$model_par$Theta
# If you want to increase n
# n = 500
# XAll = as.matrix(data.frame(1, Latitude = rnorm(n,mean = mean(X[,"Latitude"]), sd=sd(X[,"Latitude"])),
#                   Longitude = rnorm(n,mean = mean(X[,"Longitude"]), sd=sd(X[,"Longitude"])),
#                   Depth = rnorm(n,mean = mean(X[,"Depth"]), sd=sd(X[,"Depth"])),
#                   Temperature = rnorm(n,mean = mean(X[,"Temperature"]), sd=sd(X[,"Temperature"]))))
XAll <- as.matrix(data.frame(1,  Latitude = X[,"Latitude"],
Longitude = X[,"Longitude"],
Depth = X[,"Depth"],
Temperature = X[,"Temperature"]))
# Modify Sigma s.t. there's no remaining structure in the R species
SigAll <- fitAll$model_par$Sigma
# Partition B and Sigma
B_I = BAll[1:IndSpp,]
B_R = BAll[(IndSpp+1):p,]
# Sample indicator species so that they are marginally indipendent from each other
Z_I = t(sapply(1:n,
function(s) rmvnorm(1, as.vector(XAll[s,] %*% t(B_I)),
diag(diag(SigAll)[1:IndSpp]))))
# Here we can choose the strength of A
A = matrix(runif(IndSpp*(p-IndSpp),-2,2)*diag(SigAll)[1:IndSpp], nrow = IndSpp)
ZRestMean = XAll %*% t(B_R) + Z_I %*% A
ZRestCov = diag(diag(SigAll)[(IndSpp+1):p])
Z_R = t(sapply(1:n,
function(s) rmvnorm(1,ZRestMean[s,],ZRestCov)))
ZSimul = cbind(Z_I, Z_R)
# Effect of I on Z (formula should be checked)
#effZ_I/(diag(SigAll)[(IndSpp+1):p] + effZ_I + diag(var(XAll %*% t(B_R))) + 2*diag(cov(Z_I %*% A,XAll %*% t(B_R))))
YSimul = t(sapply(1:n,
function(s) rpois(p, exp(ZSimul[s,]))))
colnames(ZSimul) = colnames(YSimul) = rownames(BAll) = paste0("Y",1:30)
colnames(A) = paste0("Y",11:30)
rownames(A) = paste0("Y",1:10)
# Represent the matrix
#pdf(paste0(dirRes,"../OmegaSim.pdf"))
#corrplot(cov2cor(OmegaSim), type="upper", tl.col="black", tl.srt=45)
#dev.off()
# A = OmegaSim
# diag(A) = 0
# G=graph_from_adjacency_matrix(A, weighted = T)
# mycolors = grDevices::colorRampPalette(RColorBrewer::brewer.pal(9, "Set1"))(p)
#
# weights =  E(G)$weight / max(E(G)$weight)
# rbPal <- colorRampPalette(c('red','blue'))
# cols <- rbPal(10)[as.numeric(cut( weights,breaks = 10))]
#
# ggnet2(G,label = T,node.color = mycolors,
#        edge.size = abs( E(G)$weight / max(E(G)$weight)),
#        edge.col  = cols)
# ggsave(paste0(dirRes,"../OmegaSimGraph.pdf"), width=5, height = 5)
save(XAll, BAll, ZSimul, YSimul, A,
file = paste0(dirRes,"Sim_",SimulType,".RData"))
}
if(SimulType == "Direct_no_env"){
# Same of above but with no environment
load(paste0(dirData,'BarentsFish.Rdata'))
if(many.n){n=1000}
#Fit PLN
fitAll <- PLN(Y ~ Latitude + Longitude + Depth + Temperature,data=data.frame(X))
XAll <- matrix(rep(1,n),ncol = 1,dimnames=list(NULL,"Intercept"))
## Choose variance of Z_I
# If we want to use barents Sigma
#SigZ_I = diag(diag(SigAll)[1:IndSpp])
# If we want to standardise everything
sig_I = 1
Sig_II = diag(rep(sig_I, IndSpp))
# Here modify so that all spp have the same variance
Z_I = t(sapply(1:n,
function(s) rmvnorm(1, rep(0,IndSpp),
Sig_II)))
# Should be around 1
diag(var(Z_I))
# Here we can choose the strength of A that we need to choose wisely
#A = matrix(runif(IndSpp*(p-IndSpp),-2,2)*diag(SigAll)[1:IndSpp], nrow = IndSpp)
# We want to guarantee that for each line the squared 2-norm is equal to normVal
normVal = 0.8
A = matrix(runif(IndSpp*(p-IndSpp),-2,2), ncol = IndSpp)
# We devide by the norm
A = sqrt(normVal)*A/sqrt(diag(A%*%t(A)))
# Check the norm values
apply(A, 1, function(x) norm(x, "2")^2)
## Generate the mean of Z_R
Z_R_Mean = Z_I %*% t(A)
# Check that var(Z_R_Mean) \approx 0.8
diag(var(Z_R_Mean))
## Choose variance of Z_R
# If we want to use Barent's dataset
#ZRestCov = diag(diag(SigAll)[(IndSpp+1):p])
# If we want to fix everything
sig_R = 0.2
Sig_RR = diag(rep(sig_R, 30-IndSpp))
Z_R = t(sapply(1:n,
function(s) rmvnorm(1,Z_R_Mean[s,],Sig_RR)))
### Check that constraints are respected
### Notice that var(Z_R) =  A%*%var(Z_I)%*%t(A) + Sig_RR
# 1) var(Z_R) = var(Z_I)
# theoretical
diag(A%*% Sig_II %*% t(A) + Sig_RR)
# true
diag(var(Z_R))
# for Z_I (theoretical is diag(Sig))
diag(var(Z_I))
## Effect of I on Z is larger than intrinsic variance of Z_R :  var(Az_I)/(var(Az_I)+ sig_R) \approx 0.8
diag(var(Z_R_Mean))/diag(var(Z_R))
## Combine Z and generate Y
ZSimul = cbind(Z_I, Z_R)
YSimul = t(sapply(1:n,
function(s) rpois(p, exp(ZSimul[s,]))))
colnames(ZSimul) = colnames(YSimul) = paste0("Y",1:30)
rownames(A) = paste0("Y",11:30)
colnames(A) = paste0("Y",1:10)
png(paste0(dirRes,"sigmaZsimul.png"))
image(cov(ZSimul))
dev.off()
png(paste0(dirRes,"omegaZsimul.png"))
image(solve(cov(ZSimul)))
dev.off()
save(XAll, ZSimul, YSimul, A, sig_I, sig_R, normVal, n,
file = paste0(dirRes,"Sim_",SimulType,".RData"))
}
if(SimulType == "TrueData"){
load(paste0(dirData,'BarentsFish.Rdata'))
YSimul = Y
XAll = X
}
}else{
load(paste0(dirData,'BarentsFish.Rdata'))
load(file = paste0(dirRes,"Sim_",SimulType,".RData"))
}
# Store CV results
V <- 3; B <- 100
cvFile <- paste0(dirRes, 'PLNcv-V', V, '-B', B,'.Rdata')
fitCV = F
O = matrix(0, n, p)
n
fitInit <- PLN(YSimul ~ 1,data=data.frame(XAll))
vemInit <- list(Theta=fitInit$model_par$Theta, Omega=solve(fitInit$model_par$Sigma),
M=fitInit$var_par$M, S2=fitInit$var_par$S2)
fitAll = additionalFit(vemInit, fitInit, XAll, YSimul, O = matrix(0, n, p) )
log.lik = ELBO(X = XAll, Y = YSimul, O = matrix(0, n, p), Theta = coef(fitAll),
Omega = solve(sigma(fitAll)), M = fitAll$var_par$M, S2 = fitAll$var_par$S2)["elbo"]
save(fitAll, file=paste0(dirRes, "fitFile.RData"))
####################################################################################################################
####### Likelihood ratio tests
library(ggplot2)
library(mvtnorm)
library(PLNmodels)
rm(list=ls())
# wd = "~/Documents/GitHub/conditionalPLN/Codes/"
# setwd(wd)
library(PLNmodels)
source("condPred.R")
source("VEstep.R")
source("FunctionsImprovedVEM.R")
# Data
# dirData <- paste0(wd,"../Data/")
dirRes <- '../ResSR/'
# Ade4 datasets (large enough, with 'true' abundance)
library(ade4);
# baran95
load('../Data/BarentsFish.Rdata'); dataName <- 'barents'
p <- ncol(Y); df <- p*(p-1)/2; n = nrow(Y); p = ncol(Y); O=matrix(0, n, p)
# Run full PLN model + additionalFit
pln1 <- PLN(Y ~ -1 + X)
vemInit <- list(Theta=pln1$model_par$Theta, Omega=solve(pln1$model_par$Sigma),
M=pln1$var_par$M, S2=pln1$var_par$S2)
fitAll = additionalFit(vem=vemInit, fitInit=pln1, X=X, Y=Y, O=O)
?utils::globalVariables
?globalVariables
rm(list=ls())
setwd("~/Documents/GitHub/trophicSDM/webSDM")
devtools::document()
devtools::document()
devtools::check(vignettes = F)
setwd("~/Documents/GitHub/trophicSDM/webSDM")
devtools::document()
devtools::check(vignettes = F)
devtools::document()
devtools::check(vignettes = F)
rm(list=ls())
devtools::check(vignettes = F)
rm(list=ls())
devtools::check(vignettes = F)
rm(list=ls())
devtools::check(vignettes = F)
rm(list=ls())
devtools::check(vignettes = F)
?seq
knitr::opts_chunk$set(echo = TRUE)
seq(0.05, 0.95, length,out = S)
S = 20
seq(0.05, 0.95, length,out = S)
seq(0.05, 0.95, length.out = S)
seq(0.05, 0.95, length.out = S)
S = 20
seq(0.05, 0.95, length.out = S)
names(true_prob) = paste0("Y",1:S)
true_prob = seq(0.05, 0.95, length.out = S)
names(true_prob) = paste0("Y",1:S)
library(mnormt)
library(ggplot2)
library(akima)
library(fMultivar)
library(HiClimR)
library(mvtnorm)
T1T2=F
T2T3=F
T1T3=T
if(T1T2){
mu <- c(20,24) #T1=22, T2=24, T3=26 (when x=10 T1=24,T2=23)
sigma <- matrix(c(4,0.7*sqrt(4)*sqrt(4),0.7*sqrt(4)*sqrt(4),4),2,2)
}
if(T2T3){
mu <- c(24,26)
sigma <- matrix(c(4,0*sqrt(4)*sqrt(4),0*sqrt(4)*sqrt(4),4),2,2)
}
if(T1T3){
mu <- c(20,26)
sigma <- matrix(c(4,-0.7*sqrt(4)*sqrt(4),-0.7*sqrt(4)*sqrt(4),4),2,2)
}
#17,28 for low altitude site
x <- seq(13,32,by=0.1)
X <- grid2d(x)
sd.x=sqrt(sigma[1,1])
sd.y=sqrt(sigma[2,2])
rho=cov2cor(sigma)[1,2]
myfunc <-function (x, y = x, rho = 0,mu,sd.x,sd.y)
{
xoy = (((x-mu[1])^2/sd.x^2) - 2 * rho * (x-mu[1]) * (y -mu[2])/(sd.x*sd.y)+ ((y-mu[2])^2/sd.y^2))/(2 * (1 - rho^2))
density = exp(-xoy)/(2 * pi * sd.x * sd.y * sqrt(1 - rho^2))
attr(density, "control") = c(rho = rho)
density
}
z = myfunc(X$x, X$y, rho ,mu,sd.x,sd.y)
ZD <- list(x = x, y = x, z = matrix(z, ncol = length(x)))
col.pal<-colorRampPalette(c("blue", "red"))
colors<-col.pal(100)
#one possibilty
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(20))
T1T2=T
T2T3=F
T1T3=F
if(T1T2){
mu <- c(20,24) #T1=22, T2=24, T3=26 (when x=10 T1=24,T2=23)
sigma <- matrix(c(4,0.7*sqrt(4)*sqrt(4),0.7*sqrt(4)*sqrt(4),4),2,2)
}
if(T2T3){
mu <- c(24,26)
sigma <- matrix(c(4,0*sqrt(4)*sqrt(4),0*sqrt(4)*sqrt(4),4),2,2)
}
if(T1T3){
mu <- c(20,26)
sigma <- matrix(c(4,-0.7*sqrt(4)*sqrt(4),-0.7*sqrt(4)*sqrt(4),4),2,2)
}
#17,28 for low altitude site
x <- seq(13,32,by=0.1)
X <- grid2d(x)
sd.x=sqrt(sigma[1,1])
sd.y=sqrt(sigma[2,2])
rho=cov2cor(sigma)[1,2]
myfunc <-function (x, y = x, rho = 0,mu,sd.x,sd.y)
{
xoy = (((x-mu[1])^2/sd.x^2) - 2 * rho * (x-mu[1]) * (y -mu[2])/(sd.x*sd.y)+ ((y-mu[2])^2/sd.y^2))/(2 * (1 - rho^2))
density = exp(-xoy)/(2 * pi * sd.x * sd.y * sqrt(1 - rho^2))
attr(density, "control") = c(rho = rho)
density
}
z = myfunc(X$x, X$y, rho ,mu,sd.x,sd.y)
ZD <- list(x = x, y = x, z = matrix(z, ncol = length(x)))
col.pal<-colorRampPalette(c("blue", "red"))
colors<-col.pal(100)
#one possibilty
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(20))
?countour
?contour
?contour.gridData
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(20),label="")
cols <- brewer.pal(100, "PuRd")
library(RColorBrewer)
cols <- brewer.pal(100, "PuRd")
cols <- brewer.pal(0, "PuRd")
cols <- brewer.pal(9, "PuRd")
colors <- brewer.pal(9, "PuRd")
#one possibilty
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(20))
# for logo
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = colors, label ="")
colors <- brewer.pal(9,"MIORd")
colors <- brewer.pal(9,"YlOrRd")
# for logo
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = colors, label ="")
colors <- brewer.pal(10,"YlOrRd")
#one possibilty
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(20))
colors <- brewer.pal(9,"YlOrRd")
colors(10)
# for logo
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = colors(20), label ="")
colors <- brewer.pal(9,"YlOrRd")
# for logo
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = colors(20), label ="")
# for logo
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = colors(10), label ="")
# for logo
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = colors(10), label ="")
colors <- brewer.pal(9,"YlOrRd")
# for logo
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = colors(5), label ="")
dev.off()
colors(5)
colors <- brewer.pal(9,"YlOrRd")
colors
colors(5)
# for logo
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = colors, label ="")
# for logo
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(20), label ="")
colors <- brewer.pal(9,"YlOrRd")
col.pal = colorRampPalette(colors)
# for logo
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(20), label ="")
# for logo
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(15), label ="")
# for logo
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(10), label ="")
# for logo
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(13), label ="")
setwd("~/Documents/Phd/Traits_joint/Figure_papier/FigJTDM")
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(13), label ="")
ggsave("YlOrRd.pdf")
colors <- brewer.pal(9,"PuBu")
col.pal = colorRampPalette(colors)
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(13), label ="")
ggsave("PuBu.pdf")
colors <- brewer.pal(9,"Reds")
col.pal = colorRampPalette(colors)
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(13), label ="")
ggsave("Reds.pdf")
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(13), label ="")
ggsave("Reds.pdf")
dev.off()
dev.off()
contour(ZD, xlab="SLA", ylab="LNC",ylim=c(18,30),xlim=c(14,28),asp=1, frame.plot=F,col = col.pal(13), label ="")
ggsave("Reds.pdf")
setwd("~/Documents/GitHub/Jtdm/jtdm")
document() #wrapper for roxygenize
library(devtools)
library(roxygen2)
library(usethis)
rm(list=ls())
setwd("~/Documents/GitHub/Jtdm/jtdm")
document() #wrapper for roxygenize
devtools::document() #wrapper for roxygenize
setwd("~/Documents/GitHub/Jtdm/jtdm")
pkgdown::build_site()
pkgdown::build_site()
devtools::check(vignettes = F)
pkgdown::build_site()
devtools::document() #wrapper for roxygenize
build_manual(pkg = ".", path = "../")
library(devtools)
