[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giovanni Poggiato. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Poggiato G (2022). jtdm: Joint modelling function traits. R package version 0.1.0.","code":"@Manual{,   title = {jtdm: Joint modelling of function traits},   author = {Giovanni Poggiato},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"r-package-jtdm","dir":"","previous_headings":"","what":"Joint modelling of function traits","title":"Joint modelling of function traits","text":"Giovanni Poggiato 17/10/22","code":""},{"path":[]},{"path":"/index.html","id":"about-the-method","dir":"","previous_headings":"","what":"About the method","title":"Joint modelling of function traits","text":"package jtdm implements method described Poggiato et al., prep. Joint models predictions community traits. code producing results paper available subfolder publications repo.","code":""},{"path":[]},{"path":"/index.html","id":"r-package","dir":"","previous_headings":"Installing the R package","what":"R-package","title":"Joint modelling of function traits","text":"package implements jtdm using Markov Chain Monte Carlo Bayesian modeling software JAGS via R package runjags. Therefore, requires installation JAGS. installation easy depends operating system:","code":""},{"path":"/index.html","id":"ubutntu","dir":"","previous_headings":"Installing the R package > R-package","what":"Ubutntu","title":"Joint modelling of function traits","text":"sudo apt-get install jags","code":""},{"path":"/index.html","id":"windows","dir":"","previous_headings":"Installing the R package > R-package","what":"Windows","title":"Joint modelling of function traits","text":"https://sourceforge.net/projects/mcmc-jags/files/JAGS/4.x/Windows/","code":""},{"path":"/index.html","id":"mac","dir":"","previous_headings":"Installing the R package > R-package","what":"Mac","title":"Joint modelling of function traits","text":"https://sourceforge.net/projects/mcmc-jags/files/JAGS/4.x/Mac%20OS%20X/ JAGS installed, following code run: package implements jtdm using Markov Chain Monte Carlo Bayesian modeling software JAGS via R package runjags. Therefore, requires installation JAGS runjags. Fitting JTDM case study dataset Poggiato et al. prep. Trait-environment relationships Partial response curve suitable community-level strategy envelop possible community-level strategies SLA LNC along GDD gradient.  Computes joint probabilities SLA LNC greater 20 high altitude site. measures relative suitability communities SLA LNC higher 20 high altitude site. Unsurprisingly, probability low. , compute probability varies along GDD gradient. plot .  climatic conditions become favourable (.e. GDD increases), probability high values traits increases.","code":"library(devtools) install_github(\"giopogg/jtdm\") library(jtdm) library(ggplot2) set.seed(1712) data(Y) data(X) # Short MCMC to obtain a fast example: results are unreliable ! m = jtdm_fit(Y=Y, X=X, formula=as.formula(\"~GDD+FDD+forest\"),  adapt = 10, burnin = 100, sample = 100) ## module dic loaded  # Inferred parameters getB(m)$Bmean get_sigma(m)$Smean partial_response(m,indexGradient=\"GDD\",indexTrait=\"SLA\",FixX=list(GDD=NULL,FDD=NULL,forest=1))$p ellipse_plot(m,indexTrait = c(\"SLA\",\"LNC\"),indexGradient=\"GDD\") joint_trait_prob(m,indexTrait=c(\"SLA\",\"LNC\"), Xnew=X[\"VCHA_2940\",], bounds=list(c(20,Inf),c(20,Inf)))$PROBmean ##         1  ## 0.1116787 joint=joint_trait_prob_gradient(m,indexTrait=c(\"SLA\",\"LNC\"), indexGradient=\"GDD\", bounds=list(c(mean(Y[,\"SLA\"]),Inf),c(mean(Y[,\"SLA\"]),Inf)))"},{"path":"/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"Joint modelling of function traits","text":"package currently developed Giovanni Poggiato Laboratoire d’Ecologie Alpine. supported ANR GAMBAS.","code":""},{"path":"/reference/X.html","id":null,"dir":"Reference","previous_headings":"","what":"Site x environmental covariates dateset — X","title":"Site x environmental covariates dateset — X","text":"Includes Growing Degree Days (GDD) growing season Freezing Degree Days (FDD) growing season averaged period 1989-2019","code":""},{"path":"/reference/X.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Site x environmental covariates dateset — X","text":"","code":"data(X)  data(X)"},{"path":"/reference/X.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Site x environmental covariates dateset — X","text":"matrix","code":""},{"path":"/reference/X.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Site x environmental covariates dateset — X","text":"Orchamp consortium","code":""},{"path":"/reference/X.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Site x environmental covariates dateset — X","text":"","code":"data(X)"},{"path":"/reference/Y.html","id":null,"dir":"Reference","previous_headings":"","what":"Site x CWM traits dataset — Y","title":"Site x CWM traits dataset — Y","text":"site x CWM traits dataset computed using pinpoint abundances plants species mean","code":""},{"path":"/reference/Y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Site x CWM traits dataset — Y","text":"","code":"data(Y)"},{"path":"/reference/Y.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Site x CWM traits dataset — Y","text":"matrix","code":""},{"path":"/reference/Y.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Site x CWM traits dataset — Y","text":"Orchamp Consortium","code":""},{"path":"/reference/Y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Site x CWM traits dataset — Y","text":"","code":"data(Y)"},{"path":"/reference/ellipse_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial response curve of the pairwise most suitable community-level strategy and of the pairwise envelop of possible community-level strategy — ellipse_plot","title":"Partial response curve of the pairwise most suitable community-level strategy and of the pairwise envelop of possible community-level strategy — ellipse_plot","text":"Partial response curve pairwise suitable community-level strategy pairwise envelop possible community-level strategy. order build response curve, function builts dataframe focal variable varies along gradient (non-focal) variables fixed mean (see FixX parameter fixing non-focal variables user-defined values). chosen traits specified indexTrait. uses jtdm_predict function compute suitable community-level strategy residual covariance matrix build envelop possible CLS.","code":""},{"path":"/reference/ellipse_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial response curve of the pairwise most suitable community-level strategy and of the pairwise envelop of possible community-level strategy — ellipse_plot","text":"","code":"ellipse_plot(   m,   indexGradient,   indexTrait,   FullPost = F,   grid.length = 20,   FixX = NULL,   confL = 0.95 )"},{"path":"/reference/ellipse_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial response curve of the pairwise most suitable community-level strategy and of the pairwise envelop of possible community-level strategy — ellipse_plot","text":"m model fitted jtdm_fit indexGradient name (specified column names X) focal variable. indexTrait vector two names (specified column names Y) containing two (!) traits want compute community level strategy . FullPost FullPost = TRUE, function returns samples predictive distribution joint probabilities. FullPost= FALSE, joint probabilities computed using posterior mean parameters. grid.length number points along gradient focal variable. Default 20 (ensures fair visualisation). FixX Optional. parameter specify value non-focal variables fixed. can useful example categorical variables (e.g. forest vs meadows) want obtain partial response curve given value variable. list length names columns X. example, columns X \"MAT\",\"MAP\",\"Habitat\" want fix \"Habitat\" 1, FixX=list(MAT=NULL,MAP=NULL,Habitat=1.). Default NULL. confL confidence level confidence ellipse (.e. envelop possible community-level strategies). Default 0.95.","code":""},{"path":"/reference/ellipse_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial response curve of the pairwise most suitable community-level strategy and of the pairwise envelop of possible community-level strategy — ellipse_plot","text":"Plot partial response curve pairwise suitable community-level strategy pairwise envelop possible community-level strategy","code":""},{"path":"/reference/ellipse_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial response curve of the pairwise most suitable community-level strategy and of the pairwise envelop of possible community-level strategy — ellipse_plot","text":"","code":"data(Y)   data(X)   # Short MCMC to obtain a fast example: results are unreliable ! m = jtdm_fit(Y=Y, X=X, formula=as.formula(\"~GDD+FDD+forest\"),  adapt = 10,           burnin = 100,           sample = 100)   #> module dic loaded #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 100 iterations... #> Running the model for 100 iterations... #> Extending 100 iterations for pD/DIC estimates... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation  # plot the pairwise SLA-LNC partial response curve along the GDD gradient ellipse_plot(m,indexTrait = c(\"SLA\",\"LNC\"),indexGradient=\"GDD\")  #  plot the pairwise SLA-LNC partial response curve along the GDD gradient #  in forest (i.e. when forest=1) ellipse_plot(m,indexTrait = c(\"SLA\",\"LNC\"),indexGradient=\"GDD\",              FixX=list(GDD=NULL,FDD=NULL,forest=1))"},{"path":"/reference/getB.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the inferred regression coefficients — getB","title":"Get the inferred regression coefficients — getB","text":"Get samples posterior distribution regression coefficient matrix B, together posterior mean quantiles. regression coefficient matrix B matrix number rows defined number traits modelled, number columns number columns matrix m$X (number explanatory variables transformation via formula)","code":""},{"path":"/reference/getB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the inferred regression coefficients — getB","text":"","code":"getB(m)"},{"path":"/reference/getB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the inferred regression coefficients — getB","text":"m model fitted jtdm_fit","code":""},{"path":"/reference/getB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the inferred regression coefficients — getB","text":"list containing: Bsamples Sample posterior distribution regression coefficient matrix. array first dimension number traits, second number columns m$X (number variables transformation via formula) third number MCMC samples. Bmean Posterior mean regression coefficient matrix. Bq975,Bq025 97.5% 0.25% posterior quantiles regression coefficient matrix.","code":""},{"path":"/reference/getB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the inferred regression coefficients — getB","text":"","code":"data(Y)   data(X) # Short MCMC to obtain a fast example: results are unreliable ! m = jtdm_fit(Y=Y, X=X, formula=as.formula(\"~GDD+FDD+forest\"),  adapt = 10,          burnin = 100,          sample = 100)  #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 100 iterations... #> Running the model for 100 iterations... #> Extending 100 iterations for pD/DIC estimates... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation # get the inferred regression coefficients B=getB(m)"},{"path":"/reference/get_sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the inferred residual covariance matrix — get_sigma","title":"Get the inferred residual covariance matrix — get_sigma","text":"Get samples posterior distribution residual covariance matrix, together posterior mean quantiles.","code":""},{"path":"/reference/get_sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the inferred residual covariance matrix — get_sigma","text":"","code":"get_sigma(m)"},{"path":"/reference/get_sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the inferred residual covariance matrix — get_sigma","text":"m model fitted jtdm_fit","code":""},{"path":[]},{"path":"/reference/get_sigma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the inferred residual covariance matrix — get_sigma","text":"","code":"data(Y)   data(X)  # Short MCMC to obtain a fast example: results are unreliable ! m = jtdm_fit(Y=Y, X=X, formula=as.formula(\"~GDD+FDD+forest\"),  adapt = 10,          burnin = 100,          sample = 100)  #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 100 iterations... #> Running the model for 100 iterations... #> Extending 100 iterations for pD/DIC estimates... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation # get the inferred residual covariance Sigma =get_sigma(m)"},{"path":"/reference/joint_trait_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes joint probabilities. — joint_trait_prob","title":"Computes joint probabilities. — joint_trait_prob","text":"Computes joint probability CWM traits regions community-trait space specified bounds sites specified Xnew.","code":""},{"path":"/reference/joint_trait_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes joint probabilities. — joint_trait_prob","text":"","code":"joint_trait_prob(   m,   indexTrait,   bounds,   Xnew = NULL,   FullPost = T,   mcmc.samples = NULL,   parallel = FALSE )"},{"path":"/reference/joint_trait_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes joint probabilities. — joint_trait_prob","text":"m model fitted jtdm_fit indexTrait vector names (specified column names Y) two (!) traits want compute joint probabilities . bounds parameter specify region community-trait space function computes joint probabilities traits. list length \"indexTrait\", element list vector length two. vector represents inferior superior bounds region specified trait. example, consider two traits, bounds=list(c(10,Inf),c(10,Inf)) corresponds region community-trait space traits take values greater 10. Xnew Optionally, data frame look variables predict. omitted, fitted linear predictors used. FullPost FullPost = TRUE, function returns samples predictive distribution joint  probabilities. FullPost= FALSE, joint probabilities computed using posterior mean parameters. FullPost equal \"mean\" . mcmc.samples Optional, default NULL, works FullPost=FALSE. Defines number MCMC samples compute posterior distribution joint probabilities. Needs 1 m$model$sample x length(m$model$mcmc) parallel Optional, works FullPost = TRUE. TRUE, function uses mclapply parallelise calculation posterior distribution joint probabilities.","code":""},{"path":[]},{"path":"/reference/joint_trait_prob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes joint probabilities. — joint_trait_prob","text":"function time consuming FullPost=T. Consider setting parallel=T /set mcmc.samples value smaller length MCMC chains.","code":""},{"path":"/reference/joint_trait_prob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes joint probabilities. — joint_trait_prob","text":"","code":"data(Y)   data(X)   # Short MCMC to obtain a fast example: results are unreliable ! m = jtdm_fit(Y=Y, X=X, formula=as.formula(\"~GDD+FDD+forest\"),  adapt = 10,         burnin = 100,         sample = 100)   #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 100 iterations... #> Running the model for 100 iterations... #> Extending 100 iterations for pD/DIC estimates... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation # Compute probability of SLA and LNC to be joint-high at sites in the studies joint = joint_trait_prob(m,indexTrait=c(\"SLA\",\"LNC\"),                          bounds=list(c(mean(Y[,\"SLA\"]),Inf),c(mean(Y[,\"SLA\"]),Inf)))"},{"path":"/reference/joint_trait_prob_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes partial response curves of joint probabilities — joint_trait_prob_gradient","title":"Computes partial response curves of joint probabilities — joint_trait_prob_gradient","text":"Computes partial responses curves joint probability CWM traits function focal variable. regions joint probabilities computed specified bounds. order build response curve, function builts dataframe focal variable varies along gradient (non-focal) variables fixed mean (see FixX parameter fixing non-focal variables user-defined values). , uses joint_trait_prob compute joint probability dataset.","code":""},{"path":"/reference/joint_trait_prob_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes partial response curves of joint probabilities — joint_trait_prob_gradient","text":"","code":"joint_trait_prob_gradient(   m,   indexTrait,   indexGradient,   bounds,   grid.length = 200,   XFocal = NULL,   FixX = NULL,   FullPost = T,   mcmc.samples = NULL,   parallel = FALSE )"},{"path":"/reference/joint_trait_prob_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes partial response curves of joint probabilities — joint_trait_prob_gradient","text":"m model fitted jtdm_fit indexTrait vector names (specified column names Y) two (!) traits want compute joint probabilities . indexGradient name (specified column names X) focal variable. bounds parameter specify region community-trait space function computes joint probabilities traits. list length \"indexTrait\", element list vector length two. vector represents inferior superior bounds region specified trait. example, consider two traits, bounds=list(c(10,Inf),c(10,Inf)) corresponds region community-trait space traits take values greater 10. grid.length number points along gradient focal variable. Default 200. XFocal Optional. gradient focal variable provided user. provided, function used gradient instead building regular one. Default NULL. FixX Optional. parameter specify value non-focal variables fixed. can useful example categorical variables (e.g. forest vs meadows) want obtain partial response curve given value variable. list length names columns X. example, columns X \"MAT\",\"MAP\",\"Habitat\" want fix \"Habitat\" 1, FixX=list(MAT=NULL,MAP=NULL,Habitat=1.). Default NULL. FullPost FullPost = TRUE, function returns samples predictive distribution joint  probabilities. FullPost= FALSE, joint probabilities computed using posterior mean parameters. FullPost equal \"mean\" . mcmc.samples Optional, default NULL, works FullPost=FALSE. Defines number MCMC samples compute posterior distribution joint probabilities. Needs 1 m$model$sample x length(m$model$mcmc) parallel Optional, works FullPost = TRUE. TRUE, function uses mclapply parallelise calculation posterior distribution joint probabilities.","code":""},{"path":"/reference/joint_trait_prob_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes partial response curves of joint probabilities — joint_trait_prob_gradient","text":"list containing: GradProbssamples Sample posterior distribution joint probability along gradient. vector whose lenght number MCMC samples. NULL FullPost=FALSE. GradProbsmean Posterior mean joint probability along gradient. GradProbsq975,GradProbsq025 97.5% 0.25% posterior quantiles joint probability along gradient. NULL FullPost=FALSE. gradient gradient focal variable built function.","code":""},{"path":"/reference/joint_trait_prob_gradient.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes partial response curves of joint probabilities — joint_trait_prob_gradient","text":"function time consuming FullPost=T. Consider setting parallel=T /set mcmc.samples value smaller length MCMC chains.","code":""},{"path":"/reference/joint_trait_prob_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes partial response curves of joint probabilities — joint_trait_prob_gradient","text":"","code":"data(Y)   data(X)   # Short MCMC to obtain a fast example: results are unreliable ! m = jtdm_fit(Y=Y, X=X, formula=as.formula(\"~GDD+FDD+forest\"),  adapt = 10,           burnin = 100,           sample = 100)   #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 100 iterations... #> Running the model for 100 iterations... #> Extending 100 iterations for pD/DIC estimates... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation # Compute probability of SLA and LNC to be joint-high at sites in the studies  # Compute the joint probability of SLA and LNC    #to be joint-high along the GDD gradient joint = joint_trait_prob_gradient(m,indexTrait=c(\"SLA\",\"LNC\"),                                    indexGradient=\"GDD\",                                   bounds=list(c(mean(Y[,\"SLA\"]),Inf),c(mean(Y[,\"SLA\"]),Inf))) # Compute the joint probability of SLA and LNC to be joint-high along the # GDD gradient when forest = 1 (i.e. in forests)  joint = joint_trait_prob_gradient(m,indexTrait=c(\"SLA\",\"LNC\"),                                   indexGradient=\"GDD\",                                   bounds=list(c(mean(Y[,\"SLA\"]),Inf),c(mean(Y[,\"SLA\"]),Inf)),                                   FixX=list(GDD=NULL,FDD=NULL,forest=1))"},{"path":"/reference/jtdm.html","id":null,"dir":"Reference","previous_headings":"","what":"jtdm. — jtdm","title":"jtdm. — jtdm","text":"Package fit Join Trait Distribution Model analyse result understand predict community-level strategy. See Poggiato et al. prep.","code":""},{"path":"/reference/jtdm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"jtdm. — jtdm","text":"Giovanni Poggiato giov.poggiato@gmail.com","code":""},{"path":"/reference/jtdmCV.html","id":null,"dir":"Reference","previous_headings":"","what":"K-fold cross validation predictions and goodness of fit metrics — jtdmCV","title":"K-fold cross validation predictions and goodness of fit metrics — jtdmCV","text":"Run K-fold cross validation predictions model m specified dataset.","code":""},{"path":"/reference/jtdmCV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-fold cross validation predictions and goodness of fit metrics — jtdmCV","text":"","code":"jtdmCV(   m,   K = 5,   adapt = 200,   burnin = 500,   sample = 500,   n.chains = 2,   partition = NULL )"},{"path":"/reference/jtdmCV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-fold cross validation predictions and goodness of fit metrics — jtdmCV","text":"m model fitted jtdm_fit K number folds K-fold cross validation adapt, burnin, sample, n.chains Parameters MCMC sampler. See ?run.jags details partition partition dataset specified user. vector (whose length number sites), element specifies fold index site. Ynew Optional. observed response variables sites specified Xnew. used compute goodness fit metrics validation= T.","code":""},{"path":"/reference/jtdmCV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-fold cross validation predictions and goodness of fit metrics — jtdmCV","text":"list containing: Pred Sample posterior predictive distribution cross validation. array first dimension number sites Xnew, second number traits modelled third number MCMC samples. NULL FullPost=FALSE. PredMean Posterior mean posterior predictive distribution cross validation. Predq975,Predq025 97.5% 0.25% posterior quantiles posterior predictive distribution cross validation. NULL FullPost=FALSE. R2 R squared predictions cross validation. RMSE Root square mean error  squared predictions cross validation.","code":""},{"path":"/reference/jtdmCV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-fold cross validation predictions and goodness of fit metrics — jtdmCV","text":"","code":"data(Y)   data(X)   # Short MCMC to obtain a fast example: results are unreliable ! m = jtdm_fit(Y=Y, X=X, formula=as.formula(\"~GDD+FDD+forest\"),  adapt = 10,           burnin = 100,           sample = 100)   #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 100 iterations... #> Running the model for 100 iterations... #> Extending 100 iterations for pD/DIC estimates... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation # Run 5-fold cross validation on m pred = jtdmCV(m, K=5) #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 500 iterations... #> Running the model for 500 iterations... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation #> Fold  1  out of  5  #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 500 iterations... #> Running the model for 500 iterations... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation #> Fold  2  out of  5  #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 500 iterations... #> Running the model for 500 iterations... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation #> Fold  3  out of  5  #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 500 iterations... #> Running the model for 500 iterations... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation #> Fold  4  out of  5  #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 500 iterations... #> Running the model for 500 iterations... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation #> Fold  5  out of  5"},{"path":"/reference/jtdm_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting joint trait distribution models — jtdm_fit","title":"Fitting joint trait distribution models — jtdm_fit","text":"jtdm_fit used fit Joint trait distribution model. Requires response variable Y (sites x traits matrix) explanatory variables X.","code":""},{"path":"/reference/jtdm_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting joint trait distribution models — jtdm_fit","text":"","code":"jtdm_fit(   Y,   X,   formula,   adapt = 200,   burnin = 5000,   sample = 5000,   n.chains = 2,   monitor = c(\"B\", \"Sigma\", \"pd\") )"},{"path":"/reference/jtdm_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting joint trait distribution models — jtdm_fit","text":"Y sites x traits matrix containing community (weighted) means trait site. X design matrix, .e. sites x predictor matrix containing value explanatory variable (e.g. environmental conditions) site. formula object class \"formula\" (one can coerced class): symbolic description model fitted. details model specification given ‘Details’ adapt, burnin, sample, n.chains, monitor Parameters MCMC sampler. See ?run.jags details","code":""},{"path":[]},{"path":"/reference/jtdm_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitting joint trait distribution models — jtdm_fit","text":"formula implied intercept term. remove use either y ~ x - 1 y ~ 0 + x. See formula details allowed formulae.","code":""},{"path":"/reference/jtdm_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting joint trait distribution models — jtdm_fit","text":"","code":"data(Y)   data(X)   # Short MCMC to obtain a fast example: results are unreliable ! m = jtdm_fit(Y=Y, X=X, formula=as.formula(\"~GDD+FDD+forest\"),  adapt = 10,          burnin = 100,           sample = 100)   #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 100 iterations... #> Running the model for 100 iterations... #> Extending 100 iterations for pD/DIC estimates... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation"},{"path":"/reference/jtdm_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for joint trait distribution model — jtdm_predict","title":"Predict method for joint trait distribution model — jtdm_predict","text":"Obtains predictions fitted joint trait distribution model optionally computes R squared root mean square error (RMSE)","code":""},{"path":"/reference/jtdm_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for joint trait distribution model — jtdm_predict","text":"","code":"jtdm_predict(m = m, Xnew = NULL, Ynew = NULL, validation = F, FullPost = T)"},{"path":"/reference/jtdm_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for joint trait distribution model — jtdm_predict","text":"m model fitted jtdm_fit Xnew optionally, data frame look variables predict. omitted, fitted linear predictors used Ynew Optional. observed response variables sites specified Xnew. used compute goodness fit metrics validation= T. validation boolean parameter decide whether want compute goodness fit measures. true, Ynew needed. FullPost type predictions obtain. FullPost = TRUE, function returns samples predictive distribution. FullPost=\"mean\", function computes posterior distribution regression term \\(BXnew\\)). FullPost=F, function returns posterior mean regression term (\\(BmeanXnew\\)).","code":""},{"path":[]},{"path":"/reference/jtdm_predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict method for joint trait distribution model — jtdm_predict","text":"obtain full assesment posterior distribution, function ran FullPost=TRUE, altough can time consuming. FullPost=\"mean\" used compute partial response curves, FullPost=FALSE used compute goodness fit metrics.","code":""},{"path":"/reference/jtdm_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict method for joint trait distribution model — jtdm_predict","text":"","code":"data(Y)   data(X)   # Short MCMC to obtain a fast example: results are unreliable ! m = jtdm_fit(Y=Y, X=X, formula=as.formula(\"~GDD+FDD+forest\"),  adapt = 10,         burnin = 100,         sample = 100) #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 100 iterations... #> Running the model for 100 iterations... #> Extending 100 iterations for pD/DIC estimates... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation # marginal predictions of traits in the sites of X pred = jtdm_predict(m)"},{"path":"/reference/partial_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes and plots the trait-environment relationship of a given CWM trait and a given environmental variable — partial_response","title":"Computes and plots the trait-environment relationship of a given CWM trait and a given environmental variable — partial_response","text":"Computes plots trait-environment relationship given CWM trait focal environmental variable. order build response curve, function builts dataframe focal environmental variable varies along gradient (non-focal) variables fixed mean (see FixX parameter fixing non-focal variables user-defined values).","code":""},{"path":"/reference/partial_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes and plots the trait-environment relationship of a given CWM trait and a given environmental variable — partial_response","text":"","code":"partial_response(   m,   indexGradient,   indexTrait,   XFocal = NULL,   grid.length = 200,   FixX = NULL,   FullPost = \"mean\" )"},{"path":"/reference/partial_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes and plots the trait-environment relationship of a given CWM trait and a given environmental variable — partial_response","text":"m model fitted jtdm_fit indexGradient name (specified column names X) focal variable. indexTrait name (specified column names Y) focal trait. XFocal Optional. gradient focal variable provided user. provided, function used gradient instead building regular one. Default NULL. grid.length number points along gradient focal variable. Default 200. FixX Optional. parameter specify value non-focal variables fixed. can useful example categorical variables (e.g. forest vs meadows) want obtain partial response curve given value variable. list length names columns X. example, columns X \"MAT\",\"MAP\",\"Habitat\" want fix \"Habitat\" 1, FixX=list(MAT=NULL,MAP=NULL,Habitat=1.). Default NULL. FullPost type predictions obtain. FullPost = TRUE, function returns samples predictive distribution. FullPost=\"mean\", function computes posterior distribution regression term B%*%X). Default \"mean\", FullPost FALSE.","code":""},{"path":"/reference/partial_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes and plots the trait-environment relationship of a given CWM trait and a given environmental variable — partial_response","text":"list containing: p plot trait-environment relationship. predictions data frame containing predicted trait-environmental relationships including gradient focal environmental variable, mean trait predictions quantiles (can useful code customized plot).","code":""},{"path":"/reference/partial_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes and plots the trait-environment relationship of a given CWM trait and a given environmental variable — partial_response","text":"","code":"data(Y)   data(X)   # Short MCMC to obtain a fast example: results are unreliable ! m = jtdm_fit(Y=Y, X=X, formula=as.formula(\"~GDD+FDD+forest\"),  adapt = 10,           burnin = 100,           sample = 100)   #> Compiling rjags model... #> Calling the simulation using the rjags method... #> Note: the model did not require adaptation #> Burning in the model for 100 iterations... #> Running the model for 100 iterations... #> Extending 100 iterations for pD/DIC estimates... #> Simulation complete #> Calculating summary statistics... #> Calculating the Gelman-Rubin statistic for 21 variables.... #> Note: Unable to calculate the multivariate psrf #> Finished running the simulation # SLA-GDD relationship plot = partial_response(m,indexGradient=\"GDD\",indexTrait=\"SLA\") plot$p  # SLA-GDD relationship in forest (i.e. when forest=1) plot = partial_response(m,indexGradient=\"GDD\",indexTrait=\"SLA\",                         FixX=list(GDD=NULL,FDD=NULL,forest=1)) plot$p"}]
